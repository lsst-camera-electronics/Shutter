<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <GVL Name="GVL" Id="{543590d2-21dc-426c-bb1c-cff8b9e02654}">
    <Declaration><![CDATA[{attribute 'qualified_only'}
VAR_GLOBAL CONSTANT
	
(*
			============================GENERAL SHUTTER LAYOUT===============================
			  ________________________________________________________________________________
	        ||                                  HALL SWITCH                                   \
	X- side ||       ----14---13--12---11---10---9---8---7---6---5---4---3---2--1---0----      \    X+ side
			||_________________________________________________________________________         \	
			| | 				 |                 **  **  **                 |        \ MotorXP \
			| |					 |            *                  *            |         \ MotorXM \   
			| |					 |         *                        *         |          \_________\
			| |				     |       *                            *       |                   | |
			| |					 |      *                              *      |                   | |
			| |		     	     |     *                                *     |                   | |
			| |		BLADE 	     |     *            APERTURE            *     |       BLADE       | |
			| |		STACK	     |     *                                *     |       STACK       | |
			| |		 XM 	     |     *                                *     |        XP         | |
			| |					 |      *                              *      |                   | |
			| |					 |       *                            *       |                   | |
			| |					 |         *                        *         |                   | |
			| |					 |   	      *                  *            |                   | |
			|_|__________________|_________________**  **  **_________________|___________________|_|
			
			       ---Negative-Direction--->                          <---Positive-Direction---
*)

	 
	cHallLower 		: INT := 0;
	cHallUpper 		: INT := 14;
	cDirPos			: INT := 0;
	cDirNeg			: INT := 1;
	cTripPerHall	: INT := 16;
	cNumOfHall		: INT := 15;
	cTripCount		: INT := (cTripPerHall*cNumOfHall)-1;
	cAdc0           : INT := 0;  // Identifies the first ADC, MIO-00.
	cAdc1           : INT := 1;  // Identifies the second ADC, MIO-01.
	cFirstAdc1Hall  : INT := 8;  // Hall sensors with this ID or greater are on the second ADC MIO-01.
	  
	cBrakeOff		: BOOL	:= TRUE;
	cBrakeOn		: BOOL	:= FALSE;
	cScanVel		: LREAL := 30;//60;
	cHomeVel		: LREAL	:= 1;
	cCalibrateVel	: LREAL	:= 100;
	cPositionVel	: LREAL := 300;
	cPosStart		: LREAL := 0;
	cPosEnd			: LREAL := 750.76; //this will need to change for production once keyance snesors are in
	
	//For indexing axis
	cXP : INT := 0;  // +X side.
	cXM : INT := 1;  // -X side.
	
	// Indexing for current vs. previous PLC task cycle.
	cCurrentCycle    : INT := 0;
	cPreviousCycle   : INT := 1;
	
	//Shutter controller to/from CCS subsystem messaging version.
	nVersion		: DINT := 3;
	
END_VAR
VAR_GLOBAL
	//Safety State
	bSafetyOn	: BOOL := TRUE;
	
	//Hall Switches
	nHallSequence 			: WORD;
	
	{attribute 'TcLinkTo' := '	[0]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 1^Input event time 1;
								[1]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 2^Input event time 1;
								[2]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 3^Input event time 1;
								[3]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 4^Input event time 1;
								[4]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 5^Input event time 1;
								[5]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 6^Input event time 1;
								[6]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 7^Input event time 1;
								[7]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 8^Input event time 1;
								[8]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-01 (EL1259)^MTI Inputs 2x Channel 1^Input event time 1;
								[9]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-01 (EL1259)^MTI Inputs 2x Channel 2^Input event time 1;
								[10]	:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-01 (EL1259)^MTI Inputs 2x Channel 3^Input event time 1;
								[11]	:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-01 (EL1259)^MTI Inputs 2x Channel 4^Input event time 1;
								[12]	:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-01 (EL1259)^MTI Inputs 2x Channel 5^Input event time 1;
								[13]	:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-01 (EL1259)^MTI Inputs 2x Channel 6^Input event time 1;
								[14]	:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-01 (EL1259)^MTI Inputs 2x Channel 7^Input event time 1'}
	nInputEventTime	AT %I*	: ARRAY [cHallLower .. cHallUpper] OF UDINT; //unit in nanosecond 
	
	{attribute 'TcLinkTo' := '	[0]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 1^Status^No of input events;
								[1]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 2^Status^No of input events;
								[2]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 3^Status^No of input events;
								[3]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 4^Status^No of input events;
								[4]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 5^Status^No of input events;
								[5]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 6^Status^No of input events;
								[6]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 7^Status^No of input events;
								[7]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 8^Status^No of input events;
								[8]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-01 (EL1259)^MTI Inputs 2x Channel 1^Status^No of input events;
								[9]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-01 (EL1259)^MTI Inputs 2x Channel 2^Status^No of input events;
								[10]	:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-01 (EL1259)^MTI Inputs 2x Channel 3^Status^No of input events;
								[11]	:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-01 (EL1259)^MTI Inputs 2x Channel 4^Status^No of input events;
								[12]	:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-01 (EL1259)^MTI Inputs 2x Channel 5^Status^No of input events;
								[13]	:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-01 (EL1259)^MTI Inputs 2x Channel 6^Status^No of input events;
								[14]	:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-01 (EL1259)^MTI Inputs 2x Channel 7^Status^No of input events;'}
	nNumOfInputs AT %I*		: ARRAY [cHallLower .. cHallUpper] OF USINT;
	
	{attribute 'TcLinkTo' := '	[0]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 1^Inputs^Input event state 1;
								[1]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 2^Inputs^Input event state 1;
								[2]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 3^Inputs^Input event state 1;
								[3]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 4^Inputs^Input event state 1;
								[4]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 5^Inputs^Input event state 1;
								[5]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 6^Inputs^Input event state 1;
								[6]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 7^Inputs^Input event state 1;
								[7]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-00 (EL1259)^MTI Inputs 2x Channel 8^Inputs^Input event state 1;
								[8]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-01 (EL1259)^MTI Inputs 2x Channel 1^Inputs^Input event state 1;
								[9]		:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-01 (EL1259)^MTI Inputs 2x Channel 2^Inputs^Input event state 1;
								[10]	:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-01 (EL1259)^MTI Inputs 2x Channel 3^Inputs^Input event state 1;
								[11]	:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-01 (EL1259)^MTI Inputs 2x Channel 4^Inputs^Input event state 1;
								[12]	:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-01 (EL1259)^MTI Inputs 2x Channel 5^Inputs^Input event state 1;
								[13]	:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-01 (EL1259)^MTI Inputs 2x Channel 6^Inputs^Input event state 1;
								[14]	:=	TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MIO-01 (EL1259)^MTI Inputs 2x Channel 7^Inputs^Input event state 1;'}
	bInputEventState AT %I*	: ARRAY [cHallLower .. cHallUpper] OF BOOL;

	//Timer
	fbWaitTimer	: TON;
	
	//TestVariable
	fbWritePersistentData	: WritePersistentData;
	
	// Process data from the EtherCAT master. The time offset types are given as ULINT instead of LINT because
	// that's how the corresponding arguments to F_GetCurExtTime64() are declared.
	DcToExtTimeOffset AT %I*: ULINT;
	DcToTcTimeOffset AT %I*: ULINT;
	
	// Process data from the EL6688 PTP module, MTM-00.
	ptpAdsAddr AT %I*: AMSADDR;       // Used to contact the module for CoE data.
	
	// Process data from the two ADC modules.
	// SysTime is a 64-bit variable containing the lower 32 bits of the ADC's DC clock.
	adcSysTime AT %I*: ARRAY [GVL.cAdc0 .. GVL.cAdc1] OF ULINT;  


END_VAR

VAR_GLOBAL PERSISTENT // For million cycle test
	strokeXP	: UDINT;
	strokeXM	: UDINT;
END_VAR
]]></Declaration>
  </GVL>
</TcPlcObject>