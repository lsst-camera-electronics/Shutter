<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_StateMoving" Id="{fb05c940-3975-4fce-84e7-a3eb8bb470da}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_StateMoving
VAR_IN_OUT
	stAxis  : ARRAY [GVL.cXP .. GVL.cXM] OF ST_AxisGroup;
	bTopEntry	: BOOL;
	eCommand	: E_Commands;
END_VAR
VAR_INPUT
	stInCommand	: ST_Commands;
END_VAR
VAR_OUTPUT
	bMotionDone : BOOL;
END_VAR
VAR
	//state-machine
	nCurrentState	: INT;
	nNextState		: INT;
	bLowerEntry 	: BOOL;
	
	fbHoming	: FB_Homing;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bTopEntry = TRUE THEN
	bTopEntry := FALSE;
	stAxis[GVL.cXP].bBrake := GVL.cBrakeOff;
	stAxis[GVL.cXM].bBrake := GVL.cBrakeOff;
	IF eCommand = E_Commands.closeShutter THEN
		nNextState := 1000;
	ELSIF eCommand = E_Commands.goToCenter THEN
		nNextState := 1010;
	ELSIF eCommand = E_Commands.homeAxis THEN
		nNextState := 1020;
	ELSIF eCommand = E_Commands.jog THEN
		nNextState := 1030;
	ELSIF eCommand = E_Commands.moveAxisAbsolute THEN
		nNextState := 1040;
	ELSIF eCommand = E_Commands.moveAxisRelative THEN
		nNextState := 1050;
	ELSIF eCommand = E_Commands.openShutter THEN
		nNextState := 1060;
	END_IF
	eCommand := E_Commands.noCommand;	
END_IF	
IF nCurrentState <> nNextState THEN
	bLowerEntry := TRUE;
END_IF
nCurrentState := nNextState;

CASE nCurrentState OF

	1000: //Close Shutter
		IF stInCommand.stCloseShutter.fDirection = GVL.cDirPos THEN
			stAxis[GVL.cXP].mcMoveAbs(Axis:=stAxis[GVL.cXP].axisRef, Position:=GVL.cPosStart, Velocity:=stInCommand.stCloseShutter.fSpeed, Execute:=TRUE);
			stAxis[GVL.cXM].mcMoveAbs(Axis:=stAxis[GVL.cXM].axisRef, Position:=GVL.cPosStart, Velocity:=stInCommand.stCloseShutter.fSpeed, Execute:=TRUE);
		ELSIF stInCommand.stCloseShutter.fDirection = GVL.cDirNeg THEN
			stAxis[GVL.cXP].mcMoveAbs(Axis:=stAxis[GVL.cXP].axisRef, Position:=GVL.cPosEnd, Velocity:=stInCommand.stCloseShutter.fSpeed, Execute:=TRUE);
			stAxis[GVL.cXM].mcMoveAbs(Axis:=stAxis[GVL.cXM].axisRef, Position:=GVL.cPosEnd, Velocity:=stInCommand.stCloseShutter.fSpeed, Execute:=TRUE);
		END_IF
		IF stAxis[GVL.cXP].mcMoveAbs.Done OR stAxis[GVL.cXM].mcMoveAbs.Done THEN
			stAxis[GVL.cXP].mcMoveAbs(Axis:=stAxis[GVL.cXP].axisRef, Execute:=FALSE);
			stAxis[GVL.cXM].mcMoveAbs(Axis:=stAxis[GVL.cXM].axisRef, Execute:=FALSE);
			bMotionDone := TRUE;
			nNextState := 2000;
		END_IF	
		
	1010: //goToCenter
		stAxis[GVL.cXP].bBrake := GVL.cBrakeOff;
		stAxis[GVL.cXM].bBrake := GVL.cBrakeOff;
			stAxis[GVL.cXP].mcMoveAbs(Axis:=stAxis[GVL.cXP].axisRef, Position:=GVL.cPosStart, Velocity:=stInCommand.stGoToCenter.fSpeed, Execute:=TRUE);
			stAxis[GVL.cXM].mcMoveAbs(Axis:=stAxis[GVL.cXM].axisRef, Position:=GVL.cPosStart, Velocity:=stInCommand.stGoToCenter.fSpeed, Execute:=TRUE);
		IF stAxis[GVL.cXP].mcMoveAbs.Done AND stAxis[GVL.cXM].mcMoveAbs.Done THEN
			stAxis[GVL.cXP].bBrake := GVL.cBrakeOn;
			stAxis[GVL.cXM].bBrake := GVL.cBrakeOn;
			stAxis[GVL.cXP].mcMoveAbs(Axis:=stAxis[GVL.cXP].axisRef, Execute:=FALSE);
			stAxis[GVL.cXM].mcMoveAbs(Axis:=stAxis[GVL.cXM].axisRef, Execute:=FALSE);
			bMotionDone := TRUE;
			nNextState := 2000;
		END_IF	
		
	1020://Homing routine
		fbHoming(stAxis:=stAxis, bTopEntry:=bLowerEntry, bMotionDone=>bMotionDone);
		IF bMotionDone THEN
			nNextState := 2000;
		END_IF
		
	1030://Jog
		stAxis[stInCommand.stJog.nAxisIndex].mcJog(Axis:=stAxis[stInCommand.stJog.nAxisIndex].axisRef,
			Mode:=MC_JOGMODE_CONTINOUS, JogForward:=NOT stInCommand.stJog.nDirection  , JogBackwards:=stInCommand.stJog.nDirection );
			
	1040://move absolute
		stAxis[stInCommand.stMoveAxisAbsolute.nAxisIndex].mcMoveAbs(Axis:=stAxis[stInCommand.stMoveAxisAbsolute.nAxisIndex].axisRef,
			Position:=stInCommand.stMoveAxisAbsolute.fPosition, Velocity:=stInCommand.stMoveAxisAbsolute.fSpeed, Execute:=TRUE);
		IF stAxis[stInCommand.stMoveAxisAbsolute.nAxisIndex].mcMoveAbs.Done THEN
			stAxis[stInCommand.stMoveAxisAbsolute.nAxisIndex].mcMoveAbs(Axis:=stAxis[stInCommand.stMoveAxisAbsolute.nAxisIndex].axisRef, Execute:=FALSE);
			bMotionDone := TRUE;
			nNextState := 2000;
		END_IF
		
	1050://move relative
		stAxis[stInCommand.stMoveAxisRelative.nAxisIndex].mcMoveRel(Axis:=stAxis[stInCommand.stMoveAxisRelative.nAxisIndex].axisRef,
			Distance:=stInCommand.stMoveAxisRelative.fDistance, Velocity:=stInCommand.stMoveAxisRelative.fSpeed, Execute:=TRUE);
		IF stAxis[stInCommand.stMoveAxisRelative.nAxisIndex].mcMoveRel.Done THEN
			stAxis[stInCommand.stMoveAxisRelative.nAxisIndex].mcMoveRel(Axis:=stAxis[stInCommand.stMoveAxisRelative.nAxisIndex].axisRef, Execute:=FALSE);
			bMotionDone := TRUE;
		END_IF
		
	1060://Open Shutter
		stAxis[GVL.cXP].mcMoveAbs(Axis:=stAxis[GVL.cXP].axisRef, Position:=GVL.cPosStart, Velocity:=stInCommand.stOpenShutter.fSpeed, Execute:=TRUE);
		stAxis[GVL.cXM].mcMoveAbs(Axis:=stAxis[GVL.cXM].axisRef, Position:=GVL.cPosEnd, Velocity:=stInCommand.stOpenShutter.fSpeed, Execute:=TRUE);
		IF stAxis[GVL.cXP].mcMoveAbs.Done OR stAxis[GVL.cXM].mcMoveAbs.Done THEN
			stAxis[GVL.cXP].mcMoveAbs(Axis:=stAxis[GVL.cXP].axisRef, Execute:=FALSE);
			stAxis[GVL.cXM].mcMoveAbs(Axis:=stAxis[GVL.cXM].axisRef, Execute:=FALSE);
			bMotionDone := TRUE;
			nNextState := 2000;
		END_IF	
			
	2000:
		stAxis[GVL.cXP].bBrake := GVL.cBrakeOn;
		stAxis[GVL.cXM].bBrake := GVL.cBrakeOn;
	
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="FB_StateMoving">
      <LineId Id="31" Count="1" />
      <LineId Id="153" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="78" Count="1" />
      <LineId Id="81" Count="12" />
      <LineId Id="34" Count="0" />
      <LineId Id="143" Count="1" />
      <LineId Id="140" Count="0" />
      <LineId Id="35" Count="4" />
      <LineId Id="109" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="117" Count="1" />
      <LineId Id="115" Count="0" />
      <LineId Id="105" Count="2" />
      <LineId Id="149" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="125" Count="1" />
      <LineId Id="128" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="129" Count="5" />
      <LineId Id="150" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="67" Count="1" />
      <LineId Id="138" Count="0" />
      <LineId Id="145" Count="2" />
      <LineId Id="157" Count="2" />
      <LineId Id="165" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="170" Count="2" />
      <LineId Id="174" Count="1" />
      <LineId Id="173" Count="0" />
      <LineId Id="176" Count="5" />
      <LineId Id="183" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="184" Count="1" />
      <LineId Id="188" Count="1" />
      <LineId Id="194" Count="4" />
      <LineId Id="186" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="155" Count="1" />
      <LineId Id="69" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>