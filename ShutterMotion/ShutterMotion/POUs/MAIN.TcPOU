<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="MAIN" Id="{f71d400f-d229-45a7-bebf-e505112d31c1}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	ptpDiagReader: FB_PtpDiagReader;
	ptpDiagInfo: ST_PtpDiag;

	//Axis
	{attribute 'TcLinkTo' := '	[0].bLimitHome		:= TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MDR-00 (EL7047)^STM Status^Status^Digital input 1;
								[0].bLimitDeployed	:= TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MDR-00 (EL7047)^STM Status^Status^Digital input 2;
								[0].bBrake			:= TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MRE-01 (EL2622)^Channel 1^Output;
								[1].bLimitHome		:= TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MDR-01 (EL7047)^STM Status^Status^Digital input 1;
								[1].bLimitDeployed	:= TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MDR-01 (EL7047)^STM Status^Status^Digital input 2;
								[1].bBrake			:= TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MRE-01 (EL2622)^Channel 2^Output'}
	stAxis		: ARRAY [GVL.cXP .. GVL.cXM] OF ST_AxisGroup;
	
	//state machine function block
	fbShutterSM	: FB_ShutterSM;
	
	//external input
	{attribute 'TcLinkTo' := '	[0] := TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MDR-00 (EL7047)^STM Synchron info data^Info data 1;
								[1] := TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MDR-01 (EL7047)^STM Synchron info data^Info data 1'}
	fMotorTemp	AT %I*		: ARRAY [0..1] OF UINT;  //temp in 1 degree C per increment
	{attribute 'TcLinkTo' := '	[0] := TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MTC-00 (EL3214)^RTD Inputs Channel 1^Value;
								[1] := TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MTC-00 (EL3214)^RTD Inputs Channel 2^Value;
								[2] := TIID^Device 1 (EtherCAT)^MCD-00 (EK1200)^MTC-00 (EL3214)^RTD Inputs Channel 3^Value'}
	fRtdTemp	AT %I*		: ARRAY [0..2] OF INT;

	//other function block and var
	fbPower		: FB_Power;
	fbProtect	: FB_Protection;
	fSpeedRel	: LREAL;
	fbTracking	: FB_Tracking;

	//Timing test vars
	fbInputRtrig	: R_trig;
	fbInputFtrig	: F_trig;
	
	//
	eCommand		: E_Commands;
	
	//communication IN
	inCalibrate, 			ackCalibrate			: ST_Calibrate			;//:= (version:=nVersion);
	inChangeAxisEnable,		ackChangeAxisEnable		: ST_ChangeAxisEnable	;//:= (version:=nVersion);
	inChangeBrakeState,		ackChangeBrakeState		: ST_ChangeBrakeState	;//:= (version:=nVersion);
	inClearAllFaults,		ackClearAllFaults		: ST_ClearAllFaults		;//:= (version:=nVersion);
	inClearAxisFaults,		ackClearAxisFaults		: ST_ClearAxisFaults	;//:= (version:=nVersion);
	inCloseShutter,			ackCloseShutter			: ST_CloseShutter		;//:= (version:=nVersion);
	inDisableAllAxes,		ackDisableAllAxes		: ST_DisableAllAxes		;//:= (version:=nVersion);
	inEnableAllAxes,		ackEnableAllAxes		: ST_EnableAllAxes		;//:= (version:=nVersion);
	inGoToProd,				ackGoToProd				: ST_GoToProd			;//:= (version:=nVersion);
	inHomeAxis,				ackHomeAxis				: ST_HomeAxis			;//:= (version:=nVersion);
	inMoveAxisAbsolute,		ackMoveAxisAbsolute		: ST_MoveAxisAbsolute	;//:= (version:=nVersion);
	inMoveAxisRelative,		ackMoveAxisRelative		: ST_MoveAxisRelative	;//:= (version:=nVersion);
	inOpenShutter,			ackOpenShutter			: ST_OpenShutter		;//:= (version:=nVersion);
	inReset,				ackReset				: ST_Reset				;//:= (version:=nVersion);
	inTakeExposure,			ackTakeExposure			: ST_TakeExposure		;//:= (version:=nVersion);
	inToggleSafetyCheck,	ackToggleSafetyCheck	: ST_ToggleSafetyCheck	;//:= (version:=nVersion);
	
	//communication OUT
	fbOutTimer			: TON;
	bVersionSet			: BOOL;
	outCalibDone		: ST_CalibDone;
	outDisable			: ST_Disable;
	outEnable			: ST_Enable;
	outError			: ST_Error;
	outIgnored			: ST_Ignored;
	outMotionDone		: ST_MotionDone;
	outShutterStatus	: ST_ShutterStatus;
	outTimer			: ST_Timer;
	
	//edge detection
	stDisable_ftrig		: F_TRIG;
	stDisable_rtrig		: R_TRIG;
	stError_rtrig		: R_TRIG;
	stExpoTimer_rtrig	: R_TRIG;
	stCalibDone_rtrig	: R_TRIG;
	
	(* DEBUG Time when OpenShutterCommand was received. *)
	openCmdTime: T_DCTIME64 := 0;
	
END_VAR
VAR CONSTANT
	//Will change later once motionProfile and version are decided
	nMotionProfile		: DINT := 0;
	//nVersion			: DINT := 2;
	tUpdateTimer		: TIME := T#2S;
	cMaxSpeedSafetyOFF	: LREAL := 1;
END_VAR

(*
SN001 scaling factor
motor 1: 0.0498281
motor 2: 0.0498517
*)
(*
SN002 scaling factor
motor 1: 0.0498327596
motor 2: 0.0498327596
*)	
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Read PTP Diag info from the EL6688 once a second. Initially it will take a cycle or so for the data to be collected, shouldn't be a problem. *)
ptpDiagReader();
ptpDiagInfo := ptpDiagReader.diagInfo;

(*update Axis_Ref status*)
stAxis[GVL.cXP].axisRef.ReadStatus();
stAxis[GVL.cXM].axisRef.ReadStatus();

////////////////////////////////////////////////////////////////////
//CCS to PLC
////////////////////////////////////////////////////////////////////
(* Check for new messages from CCS *)
ACT_CheckNewMessage();

////////////////////////////////////////////////////////////////////
(*shutter protection module*)
////////////////////////////////////////////////////////////////////
ACT_Protection();
	
////////////////////////////////////////////////////////////////////
//Shutter State Machine
////////////////////////////////////////////////////////////////////
ACT_StateMachine();
	
////////////////////////////////////////////////////////////////////
//PLC to CCS
////////////////////////////////////////////////////////////////////
(*Set version*)
//ACT_SetVersion();

//Shutter Status---------------------------------
ACT_ShutterStatus();

////////////////////////////////////////////////////////////////////
//Other (tracking, temperature, etc.)
////////////////////////////////////////////////////////////////////

(*track motion of both blades*)
fbTracking(
	stAxis				:= stAxis, 
	eCommand			:= eCommand, 
	bMotionDone			:= fbShutterSM.bMotionDone, 
	inReset				:= inReset,
	inMoveAxisAbsolute	:= inMoveAxisAbsolute,
	inMoveAxisRelative	:= inMoveAxisRelative,
	stOutMotionDone		=> outMotionDone);
	
(*
//write persistent data to file every second
IF fbWriteDelay.Q THEN
	GVL.fbWritePersistentData(NETID:='', PORT:=851, START:=TRUE, TMOUT:=T#1S);
	fbWriteDelay(IN:=FALSE);
ELSE
	fbWriteDelay(IN:=TRUE, PT:=T#2S);
END_IF
*)

]]></ST>
    </Implementation>
    <Action Name="ACT_CheckNewMessage" Id="{f5374ef6-d39e-45f2-a810-7d6f723bd4be}">
      <Implementation>
        <ST><![CDATA[(* Check for new messages from CCS *)
eCommand := E_Commands.noCommand;
IF F_HaveDifferentIDs(inCalibrate, ackCalibrate) THEN
	ackCalibrate := inCalibrate;
	IF ackCalibrate.version <> GVL.nVersion THEN
		outIgnored.reason := 0; (*wrong version*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSIF fbShutterSM.nSMState<>E_StatesMaint.Still THEN//AND ((fbShutterSM.nSMState<>E_StatesProd.Closing) OR (fbShutterSM.nSMState<>E_StatesProd.Traveling)) THEN
		outIgnored.reason := 1; (*ignored by state machine*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSE
		eCommand := E_Commands.calibrate;
	END_IF
	
ELSIF F_HaveDifferentIDs(inChangeAxisEnable, ackChangeAxisEnable) THEN
	ackChangeAxisEnable	:= inChangeAxisEnable;
	IF ackChangeAxisEnable.version <> GVL.nVersion THEN
		outIgnored.reason := 0; (*wrong version*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSIF fbShutterSM.nSMState <> E_StatesMaint.Still THEN //AND ((fbShutterSM.nSMState<>E_StatesProd.Closing) OR (fbShutterSM.nSMState<>E_StatesProd.Traveling)) THEN
		outIgnored.reason := 1; (*ignored by state machine*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSE
		eCommand := E_Commands.changeAxisEnable;
	END_IF
	
ELSIF F_HaveDifferentIDs(inChangeBrakeState, ackChangeBrakeState) THEN
	ackChangeBrakeState	:= inChangeBrakeState;
	IF ackChangeBrakeState.version <> GVL.nVersion THEN
		outIgnored.reason := 0; (*wrong version*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSIF fbShutterSM.nSMState <> E_StatesMaint.Still THEN //AND ((fbShutterSM.nSMState<>E_StatesProd.Closing) OR (fbShutterSM.nSMState<>E_StatesProd.Traveling)) THEN
		outIgnored.reason := 1; (*ignored by state machine*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSE
		eCommand := E_Commands.changeBrakeState;
	END_IF
	
ELSIF F_HaveDifferentIDs(inClearAllFaults, ackClearAllFaults) THEN
	ackClearAllFaults := inClearAllFaults;
	IF ackClearAllFaults.version <> GVL.nVersion THEN
		outIgnored.reason := 0; (*wrong version*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSIF fbShutterSM.nSMState <> E_StatesMaint.Still THEN //AND ((fbShutterSM.nSMState<>E_StatesProd.Closing) OR (fbShutterSM.nSMState<>E_StatesProd.Traveling)) THEN
		outIgnored.reason := 1; (*ignored by state machine*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSE
		eCommand := E_Commands.clearAllFaults;
	END_IF
	
ELSIF F_HaveDifferentIDs(inClearAxisFaults, ackClearAxisFaults) THEN
	ackClearAxisFaults 	:= inClearAxisFaults;
	IF ackClearAxisFaults.version <> GVL.nVersion THEN
		outIgnored.reason := 0; (*wrong version*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSIF fbShutterSM.nSMState <> E_StatesMaint.Still THEN //AND ((fbShutterSM.nSMState<>E_StatesProd.Closing) OR (fbShutterSM.nSMState<>E_StatesProd.Traveling)) THEN
		outIgnored.reason := 1; (*ignored by state machine*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSE
		eCommand := E_Commands.clearAxisFaults;
	END_IF
	
ELSIF F_HaveDifferentIDs(inCloseShutter, ackCloseShutter) THEN
	ackCloseShutter 	:= inCloseShutter;
	IF ackCloseShutter.version <> GVL.nVersion THEN
		outIgnored.reason := 0; (*wrong version*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSIF fbShutterSM.nSMState <> E_StatesProd.Opened THEN //AND ((fbShutterSM.nSMState<>E_StatesProd.Closing) OR (fbShutterSM.nSMState<>E_StatesProd.Traveling)) THEN
		outIgnored.reason := 1; (*ignored by state machine*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSE
		eCommand := E_Commands.closeShutter;
	END_IF
	
ELSIF F_HaveDifferentIDs(inDisableAllAxes, ackDisableAllAxes) THEN
	ackDisableAllAxes :=  inDisableAllAxes;
	IF ackDisableAllAxes.version <> GVL.nVersion THEN
		outIgnored.reason := 0; (*wrong version*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSIF fbShutterSM.nSMState <> E_StatesMaint.Still THEN //AND ((fbShutterSM.nSMState<>E_StatesProd.Closing) OR (fbShutterSM.nSMState<>E_StatesProd.Traveling)) THEN
		outIgnored.reason := 1; (*ignored by state machine*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSE
		eCommand := E_Commands.disableAllAxes;
	END_IF
	
ELSIF F_HaveDifferentIDs( inEnableAllAxes, ackEnableAllAxes) THEN
	ackEnableAllAxes :=  inEnableAllAxes;
	IF ackEnableAllAxes.version <> GVL.nVersion THEN
		outIgnored.reason := 0; (*wrong version*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSIF fbShutterSM.nSMState <> E_StatesMaint.Still THEN //AND ((fbShutterSM.nSMState<>E_StatesProd.Closing) OR (fbShutterSM.nSMState<>E_StatesProd.Traveling)) THEN
		outIgnored.reason := 1; (*ignored by state machine*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSE
		eCommand := E_Commands.enableAllAxes;
	END_IF
	
ELSIF F_HaveDifferentIDs( inGoToProd, ackGoToProd) THEN
	ackGoToProd :=  inGoToProd;
	IF ackGoToProd.version <> GVL.nVersion THEN
		outIgnored.reason := 0; (*wrong version*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSIF fbShutterSM.nSMState <> E_StatesMaint.Still THEN //AND ((fbShutterSM.nSMState<>E_StatesProd.Closing) OR (fbShutterSM.nSMState<>E_StatesProd.Traveling)) THEN
		outIgnored.reason := 1; (*ignored by state machine*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSE
		eCommand := E_Commands.goToProd; 
	END_IF	
	
ELSIF F_HaveDifferentIDs( inHomeAxis, ackHomeAxis) THEN
	ackHomeAxis :=  inHomeAxis;
	IF ackHomeAxis.version <> GVL.nVersion THEN
		outIgnored.reason := 0; (*wrong version*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSIF fbShutterSM.nSMState <> E_StatesMaint.Still THEN //AND ((fbShutterSM.nSMState<>E_StatesProd.Closing) OR (fbShutterSM.nSMState<>E_StatesProd.Traveling)) THEN
		outIgnored.reason := 1; (*ignored by state machine*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSE
		eCommand := E_Commands.homeAxis;
	END_IF
	
ELSIF F_HaveDifferentIDs( inMoveAxisAbsolute, ackMoveAxisAbsolute) THEN
	ackMoveAxisAbsolute :=  inMoveAxisAbsolute;	
	IF ackMoveAxisAbsolute.version <> GVL.nVersion THEN
		outIgnored.reason := 0; (*wrong version*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSIF fbShutterSM.nSMState <> E_StatesMaint.Still THEN //AND ((fbShutterSM.nSMState<>E_StatesProd.Closing) OR (fbShutterSM.nSMState<>E_StatesProd.Traveling)) THEN
		outIgnored.reason := 1; (*ignored by state machine*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSE
		eCommand := E_Commands.moveAxisAbsolute;
	END_IF
	
ELSIF F_HaveDifferentIDs( inMoveAxisRelative, ackMoveAxisRelative) THEN
	ackMoveAxisRelative := inMoveAxisRelative;	
	IF ackMoveAxisRelative.version <> GVL.nVersion THEN
		outIgnored.reason := 0; (*wrong version*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSIF fbShutterSM.nSMState <> E_StatesMaint.Still THEN //AND ((fbShutterSM.nSMState<>E_StatesProd.Closing) OR (fbShutterSM.nSMState<>E_StatesProd.Traveling)) THEN
		outIgnored.reason := 1; (*ignored by state machine*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSE
		eCommand := E_Commands.moveAxisRelative;
	END_IF
	
ELSIF F_HaveDifferentIDs(inOpenShutter, ackOpenShutter) THEN
	openCmdTime := F_GetCurExtTime64(GVL.DcToExtTimeOffset, GVL.DcToTcTimeOffset);
	ackOpenShutter := inOpenShutter;
	IF ackOpenShutter.version <> GVL.nVersion THEN
		outIgnored.reason := 0; (*wrong version*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSIF fbShutterSM.nSMState <> E_StatesProd.Closed THEN //AND ((fbShutterSM.nSMState<>E_StatesProd.Closing) OR (fbShutterSM.nSMState<>E_StatesProd.Traveling)) THEN
		outIgnored.reason := 1; (*ignored by state machine*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSE
		eCommand := E_Commands.openShutter;
	END_IF
	
ELSIF F_HaveDifferentIDs(inReset, ackReset) THEN
	ackReset := inReset;	
	IF ackReset.version <> GVL.nVersion THEN
		outIgnored.reason := 0; (*wrong version*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSE
		eCommand := E_Commands.reset;
	END_IF
	
ELSIF F_HaveDifferentIDs(inTakeExposure, ackTakeExposure) THEN
	ackTakeExposure := inTakeExposure;	
	IF ackTakeExposure.version <> GVL.nVersion THEN
		outIgnored.reason := 0; (*wrong version*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSIF fbShutterSM.nSMState <> E_StatesProd.Closed THEN //AND ((fbShutterSM.nSMState<>E_StatesProd.Closing) OR (fbShutterSM.nSMState<>E_StatesProd.Traveling)) THEN
		outIgnored.reason := 1; (*ignored by state machine*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSE
		eCommand := E_Commands.takeExposure;
	END_IF
	
ELSIF F_HaveDifferentIDs(inToggleSafetyCheck, ackToggleSafetyCheck) THEN
	ackToggleSafetyCheck := inToggleSafetyCheck;	
	IF ackToggleSafetyCheck.version <> GVL.nVersion THEN
		outIgnored.reason := 0; (*wrong version*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSIF fbShutterSM.nSMState <> E_StatesMaint.Still THEN
		outIgnored.reason := 1; (*ignored by state machine*)
		outIgnored.sequence := outIgnored.sequence + 1;
	ELSE
		eCommand := E_Commands.turnSafetyOff;
	END_IF
	
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Protection" Id="{c6b875e2-8f86-47ce-99b2-5bf00c8ba28d}">
      <Implementation>
        <ST><![CDATA[IF (eCommand = E_Commands.turnSafetyOff) THEN
	GVL.bSafetyOn := NOT GVL.bSafetyOn;
	outShutterStatus.sequence := outShutterStatus.sequence +1;
END_IF
IF (fbTracking.bMotionDone AND NOT GVL.bSafetyOn) THEN
	GVL.bSafetyOn := TRUE;
	outShutterStatus.sequence := outShutterStatus.sequence +1;
END_IF
outShutterStatus.isSafetyOn := GVL.bSafetyOn;

IF GVL.bSafetyOn THEN
	fbProtect(
		stAxis 				:= stAxis, 
		nState 				:= fbShutterSM.nSMState,
		eCommand 			:= eCommand,
		
		inCalibrate			:= inCalibrate,
		inChangeAxisEnable	:= inChangeAxisEnable,
		inChangeBrakeState	:= inChangeBrakeState,
		inClearAllFaults	:= inClearAllFaults,
		inClearAxisFaults	:= inClearAxisFaults,
		inCloseShutter		:= inCloseShutter,
		inDisableAllAxes	:= inDisableAllAxes,
		inEnableAllAxes		:= inEnableAllAxes,
		inGoToProd			:= inGoToProd,
		inHomeAxis			:= inHomeAxis,
		inMoveAxisAbsolute	:= inMoveAxisAbsolute,
		inMoveAxisRelative	:= inMoveAxisRelative,
		inOpenShutter		:= inOpenShutter,
		inReset				:= inReset,
		inTakeExposure		:= inTakeExposure,
		inToggleSafetyCheck	:= inToggleSafetyCheck);
ELSE
(* Shouldn't be able to enter PROD mode so this is not needed
	IF (inReset.speed > cMaxSpeedSafetyOFF) THEN
		inReset.speed := cMaxSpeedSafetyOFF;
	END_IF
*)	
	IF (inMoveAxisAbsolute.speed > cMaxSpeedSafetyOFF) THEN
		inMoveAxisAbsolute.speed := cMaxSpeedSafetyOFF;
	END_IF
	
	IF ((TIME_TO_LREAL(inMoveAxisRelative.moveTime)/1000)>0) THEN
		fSpeedRel	:= (2*ABS(inMoveAxisRelative.distance)/(TIME_TO_LREAL(inMoveAxisRelative.moveTime)/1000));
	ELSE
		fSpeedRel	:= 0.0001;
	END_IF
	
	if (fSpeedRel > cMaxSpeedSafetyOFF) THEN
		fSpeedRel := cMaxSpeedSafetyOFF;
		inMoveAxisRelative.moveTime := LREAL_TO_TIME(1000*2*ABS(inMoveAxisRelative.distance)/(fSpeedRel));
	END_IF
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_SetVersion" Id="{587141af-a60e-402a-8401-1dc2f63ebe7a}">
      <Implementation>
        <ST><![CDATA[(*Set version*)
IF NOT bVersionSet THEN
	bVersionSet 				:= TRUE;
	outShutterStatus.version 	:= GVL.nVersion;
	outDisable.version 			:= GVL.nVersion;
	outEnable.version 			:= GVL.nVersion;
	outError.version 			:= GVL.nVersion;
	outIgnored.version 			:= GVL.nVersion;
	outTimer.version 			:= GVL.nVersion;
	outCalibDone.version 		:= GVL.nVersion;
	outMotionDone.version		:= GVL.nVersion;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_ShutterStatus" Id="{61978c63-ebb5-4185-a49f-56c06c9a4ef0}">
      <Implementation>
        <ST><![CDATA[//updates upon changes---------------------------------------------
//Shutter disabled/enabled
stDisable_rtrig(CLK:=(fbShutterSM.nSMState = E_StatesTop.Disabled));
IF stDisable_rtrig.Q THEN
	outDisable.sequence := outDisable.sequence + 1;
END_IF
stDisable_ftrig(CLK:=(fbShutterSM.nSMState = E_StatesTop.Disabled));
IF stDisable_ftrig.Q THEN
	outEnable.sequence := outEnable.sequence + 1;
END_IF

//Exposure timer ended
outTimer.sequence := fbShutterSM.stOutTimer.sequence;

//Calibration Done
stCalibDone_rtrig(CLK:=fbShutterSM.bCalibDone);
IF stCalibDone_rtrig.Q THEN
	outCalibDone.hallPosCal := fbShutterSM.stOutCalibDone.hallPosCal;
	outCalibDone.sequence := outCalibDone.sequence + 1;
	outShutterStatus.isCalibrated := (stAxis[GVL.cXP].bIsCalibrated AND stAxis[GVL.cXM].bIsCalibrated);
	outShutterStatus.sequence := outShutterStatus.sequence +1;
END_IF

//Periodic updates---------------------------------------------
fbOutTimer(IN:=TRUE, PT:=tUpdateTimer);
IF fbOutTimer.Q THEN
	fbOutTimer(IN:=FALSE);
	
	(*increment sequence*)
	outShutterStatus.sequence := outShutterStatus.sequence +1;

	(*shutter status update, common*)
	outShutterStatus.motionProfile := nMotionProfile;
	outShutterStatus.isCalibrated := (stAxis[GVL.cXP].bIsCalibrated AND stAxis[GVL.cXM].bIsCalibrated);
	outShutterStatus.smState := fbShutterSM.nSMState;
	outShutterStatus.temperature[0] := INT_TO_DINT(fRtdTemp[0]);
	outShutterStatus.temperature[1] := INT_TO_DINT(fRtdTemp[1]);
	outShutterStatus.temperature[2] := INT_TO_DINT(fRtdTemp[2]);
	outShutterStatus.when := F_GetCurExtTime64(GVL.DcToExtTimeOffset, GVL.DcToTcTimeOffset);
	outShutterStatus.ptpState := MAIN.ptpDiagInfo.PTPState;
	outShutterStatus.leapSeconds := MAIN.ptpDiagInfo.CurrentUtcOffset;
	outShutterStatus.leapIsValid := TO_BOOL(MAIN.ptpDiagInfo.CurrentUtcOffsetIsValid);
	
	(*shutter status update, axis XP specific*)
	outShutterStatus.axis[GVL.cXP].actPos := stAxis[GVL.cXP].axisRef.NcToPlc.ActPos;
	outShutterStatus.axis[GVL.cXP].actVel := stAxis[GVL.cXP].axisRef.NcToPlc.ActVelo;
	outShutterStatus.axis[GVL.cXP].setAcc := stAxis[GVL.cXP].axisRef.NcToPlc.SetAcc;
	outShutterStatus.axis[GVL.cXP].brakeSet := NOT stAxis[GVL.cXP].bBrake;
	outShutterStatus.axis[GVL.cXP].enabled := (stAxis[GVL.cXP].axisRef.PlcToNc.ControlDWord.0 AND	(*controlDword bit 0, 1, 2 corresponds to*)
												stAxis[GVL.cXP].axisRef.PlcToNc.ControlDWord.1 AND 	(*MC_Power parameters Enable, Enable_Positive, Enable_Negative*)
												stAxis[GVL.cXP].axisRef.PlcToNc.ControlDWord.2);
	outShutterStatus.axis[GVL.cXP].errorID	:= stAxis[GVL.cXP].axisRef.Status.ErrorID;
	outShutterStatus.axis[GVL.cXP].highLimit := stAxis[GVL.cXP].bLimitDeployed;
	outShutterStatus.axis[GVL.cXP].lowLimit := stAxis[GVL.cXP].bLimitHome;
	outShutterStatus.axis[GVL.cXP].isHomed := stAxis[GVL.cXP].axisRef.Status.Homed;
	outShutterStatus.axis[GVL.cXP].icTemp := UINT_TO_LREAL(fMotorTemp[0]);
	
	(*shutter status update, axis XM specific*)
	outShutterStatus.axis[GVL.cXM].actPos := stAxis[GVL.cXM].axisRef.NcToPlc.ActPos;
	outShutterStatus.axis[GVL.cXM].actVel := stAxis[GVL.cXM].axisRef.NcToPlc.ActVelo;
	outShutterStatus.axis[GVL.cXM].setAcc := stAxis[GVL.cXM].axisRef.NcToPlc.SetAcc;
	outShutterStatus.axis[GVL.cXM].brakeSet := NOT stAxis[GVL.cXM].bBrake;
	outShutterStatus.axis[GVL.cXM].enabled := (stAxis[GVL.cXM].axisRef.PlcToNc.ControlDWord.0 AND	(*controlDword bit 0, 1, 2 corresponds to*)
												stAxis[GVL.cXM].axisRef.PlcToNc.ControlDWord.1 AND 	(*MC_Power parameters Enable, Enable_Positive, Enable_Negative*)
												stAxis[GVL.cXM].axisRef.PlcToNc.ControlDWord.2);
	outShutterStatus.axis[GVL.cXM].errorID	:= stAxis[GVL.cXM].axisRef.Status.ErrorID;
	outShutterStatus.axis[GVL.cXM].highLimit := stAxis[GVL.cXM].bLimitHome;
	outShutterStatus.axis[GVL.cXM].lowLimit := stAxis[GVL.cXM].bLimitDeployed;
	outShutterStatus.axis[GVL.cXM].isHomed := stAxis[GVL.cXM].axisRef.Status.Homed;
	outShutterStatus.axis[GVL.cXM].icTemp := UINT_TO_LREAL(fMotorTemp[1]);
	
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_StateMachine" Id="{08dae863-650c-4435-9c46-4f225361ff07}">
      <Implementation>
        <ST><![CDATA[fbShutterSM(
	//inputs
	stAxis				:= stAxis,
	eCommand			:= eCommand,
	stCalibrate			:= inCalibrate,
	stChangeAxisEnable	:= inChangeAxisEnable,
	stChangeBrakeState	:= inChangeBrakeState,
	stClearAllFaults	:= inClearAllFaults,
	stClearAxisFaults	:= inClearAxisFaults,
	stCloseShutter		:= inCloseShutter,
	stDisableAllAxes	:= inDisableAllAxes,
	stEnableAllAxes		:= inEnableAllAxes,
	stGoToProd			:= inGoToProd,
	stHomeAxis			:= inHomeAxis,
	stMoveAxisAbsolute	:= inMoveAxisAbsolute,
	stMoveAxisRelative	:= inMoveAxisRelative,
	stOpenShutter		:= inOpenShutter,
	stReset				:= inReset,
	stTakeExposure		:= inTakeExposure);]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="MAIN">
      <LineId Id="3986" Count="1" />
      <LineId Id="3992" Count="0" />
      <LineId Id="3990" Count="0" />
      <LineId Id="3783" Count="17" />
      <LineId Id="3820" Count="5" />
      <LineId Id="3836" Count="0" />
      <LineId Id="3893" Count="0" />
      <LineId Id="3837" Count="0" />
      <LineId Id="3860" Count="14" />
      <LineId Id="3883" Count="9" />
      <LineId Id="4092" Count="0" />
      <LineId Id="324" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.ACT_CheckNewMessage">
      <LineId Id="2" Count="146" />
      <LineId Id="196" Count="0" />
      <LineId Id="149" Count="15" />
      <LineId Id="168" Count="27" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.ACT_Protection">
      <LineId Id="2" Count="1" />
      <LineId Id="5" Count="3" />
      <LineId Id="53" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="52" Count="0" />
      <LineId Id="11" Count="2" />
      <LineId Id="15" Count="19" />
      <LineId Id="54" Count="0" />
      <LineId Id="35" Count="3" />
      <LineId Id="55" Count="0" />
      <LineId Id="39" Count="12" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.ACT_SetVersion">
      <LineId Id="2" Count="10" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.ACT_ShutterStatus">
      <LineId Id="47" Count="18" />
      <LineId Id="68" Count="1" />
      <LineId Id="66" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="2" Count="13" />
      <LineId Id="72" Count="3" />
      <LineId Id="16" Count="28" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.ACT_StateMachine">
      <LineId Id="2" Count="2" />
      <LineId Id="6" Count="14" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>