<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="FB_StateMoving" Id="{fb05c940-3975-4fce-84e7-a3eb8bb470da}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_StateMoving
VAR_IN_OUT
	stAxis  	: ARRAY [GVL.cXP .. GVL.cXM] OF ST_AxisGroup;
	bTopEntry	: BOOL;
	eCommand	: E_Commands;
END_VAR
VAR_INPUT
	stHomeAxis			: ST_HomeAxis;
	stMoveAxisAbsolute	: ST_MoveAxisAbsolute;
	stMoveAxisRelative	: ST_MoveAxisRelative;
END_VAR
VAR_OUTPUT
	bBusy		: BOOL;
END_VAR
VAR
	//state-machine
	nCurrentState	: INT;
	nNextState		: INT;
	bLowerEntry 	: BOOL;
	//homing subroutine
	fbHoming	: FB_Homing;
	//move relative vars
	fDistance, fTime, fSpeed, fAccel, fJerk : LREAL;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bTopEntry = TRUE THEN
	bTopEntry := FALSE;
	IF eCommand = E_Commands.homeAxis THEN
		nNextState := 1000;
	ELSIF eCommand = E_Commands.moveAxisAbsolute THEN
		fDistance := ABS(stAxis[stMoveAxisAbsolute.axisIndex].axisRef.NcToPlc.ActPos - stMoveAxisAbsolute.position);
		fSpeed	:= stMoveAxisAbsolute.speed;
		IF (fSpeed>0) THEN
			IF (fSpeed>1668.355556) THEN
				fSpeed:=1668.355556;
			END_IF
			fTime 	:= (2*fDistance)/(fSpeed);
			IF (fTime<0.9) THEN
				fTime:=0.9;
			END_IF
			fAccel 	:= (8*fDistance)/(fTime*fTime);
			fJerk	:= (32*fDistance)/(fTime*fTime*fTime);
		END_IF
		nNextState := 1010;
	ELSIF eCommand = E_Commands.moveAxisRelative THEN
		(* 
			equations  		(distance in mm, time in sec)
			Velocity 		= 2*distance/time
			Acceleration 	= 8*distance/time^2
			jerk 			= 32*distance/time^3
		*)
		fTime	:= TIME_TO_LREAL(stMoveAxisRelative.moveTime)/1000;
		IF (fTime>0) THEN
			fSpeed 	:= (2*ABS(stMoveAxisRelative.distance))/(fTime);
			fAccel 	:= (8*ABS(stMoveAxisRelative.distance))/(fTime*fTime);
			fJerk	:= (32*ABS(stMoveAxisRelative.distance))/(fTime*fTime*fTime);
		END_IF

		nNextState := 1020;
	END_IF
END_IF	

IF (fSpeed > 1668.35556) THEN
	fSpeed := 1668.3556;
END_IF
IF (fAccel > 7414.91358) THEN
	fAccel := 7414.91358;
END_IF
IF (fJerk > 32955.17147) THEN
	fJerk := 32955.17147;
END_IF

IF nCurrentState <> nNextState THEN
	bLowerEntry := TRUE;
END_IF
nCurrentState := nNextState;
bBusy := TRUE;
CASE nCurrentState OF
		
	1000://Homing routine
		fbHoming(stAxis:=stAxis, bTopEntry:=bLowerEntry);
		IF NOT fbHoming.bBusy THEN
			nNextState := 2000;
		END_IF
		
	1010://move absolute
		stAxis[stMoveAxisAbsolute.axisIndex].mcMoveAbs(Axis:=stAxis[stMoveAxisAbsolute.axisIndex].axisRef,
			Position:=stMoveAxisAbsolute.position, Velocity:=fSpeed, Acceleration:= fAccel, Deceleration:= fAccel, Jerk:= fJerk,  Execute:=TRUE);
		IF stAxis[stMoveAxisAbsolute.axisIndex].mcMoveAbs.Done THEN
			stAxis[stMoveAxisAbsolute.axisIndex].mcMoveAbs(Axis:=stAxis[stMoveAxisAbsolute.axisIndex].axisRef, Execute:=FALSE);
			nNextState := 2000;
		END_IF
		
	1020://move relative with different motion profile parameter
		stAxis[stMoveAxisRelative.axisIndex].mcMoveRel(Axis:=stAxis[stMoveAxisRelative.axisIndex].axisRef,
			Distance:=stMoveAxisRelative.distance, Velocity:=fSpeed, Acceleration:=fAccel, Jerk:=fJerk, Execute:=TRUE);
		IF stAxis[stMoveAxisRelative.axisIndex].mcMoveRel.Done THEN
			stAxis[stMoveAxisRelative.axisIndex].mcMoveRel(Axis:=stAxis[stMoveAxisRelative.axisIndex].axisRef, Execute:=FALSE);
			nNextState := 2000;
		END_IF
			
	2000:
		bBusy := FALSE;
	
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="FB_StateMoving">
      <LineId Id="31" Count="1" />
      <LineId Id="82" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="307" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="331" Count="2" />
      <LineId Id="345" Count="0" />
      <LineId Id="335" Count="5" />
      <LineId Id="312" Count="0" />
      <LineId Id="87" Count="1" />
      <LineId Id="248" Count="4" />
      <LineId Id="247" Count="0" />
      <LineId Id="346" Count="1" />
      <LineId Id="350" Count="1" />
      <LineId Id="348" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="316" Count="0" />
      <LineId Id="318" Count="1" />
      <LineId Id="321" Count="5" />
      <LineId Id="317" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="143" Count="1" />
      <LineId Id="140" Count="0" />
      <LineId Id="35" Count="2" />
      <LineId Id="67" Count="1" />
      <LineId Id="138" Count="0" />
      <LineId Id="145" Count="2" />
      <LineId Id="157" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="170" Count="1" />
      <LineId Id="174" Count="1" />
      <LineId Id="173" Count="0" />
      <LineId Id="176" Count="4" />
      <LineId Id="183" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>