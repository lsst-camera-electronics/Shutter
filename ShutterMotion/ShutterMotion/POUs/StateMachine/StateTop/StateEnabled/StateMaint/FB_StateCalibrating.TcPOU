<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="FB_StateCalibrating" Id="{7d0dc74d-1ee4-41a4-99a9-54fce7fd062a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_StateCalibrating
VAR_IN_OUT
	stAxis  	: ARRAY [GVL.cXP .. GVL.cXM] OF ST_AxisGroup;	
	bTopEntry	: BOOL;
	bCalibDone	: BOOL;
	bInterrupted: BOOL;
END_VAR
VAR_OUTPUT
	stOutCalibDone	: ST_CalibDone;
END_VAR
VAR
	nCurrentState	: INT;
	nNextState		: INT;
	
	//counter
	i	: INT;
	nTripCountXP	: INT;
	nTripCountXM	: INT;
	
	//test var
	//a, b, c : INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//////////////////////////////////////////////////
//perform software calibration of axis. 		//
//////////////////////////////////////////////////
IF bInterrupted THEN
	bInterrupted := FALSE;
	nNextState := 0;
END_IF
IF bTopEntry = TRUE THEN
	bTopEntry := FALSE;
	nNextState :=8010;
END_IF	
nCurrentState := nNextState;
bCalibDone := FALSE;
CASE nCurrentState OF
	0:
	
	(*Perform software calibration of axis xp*)
	8010: //Clear previous Calibration value
		FOR i:=0 TO GVL.cTripCount BY 1 DO
			stAxis[GVL.cXP].fHallPosCal[0,i]:=0;
			stAxis[GVL.cXP].fHallPosCal[1,i]:=0;
		END_FOR
		stAxis[GVL.cXP].mcMoveAbs(Axis:=stAxis[GVL.cXP].axisRef, Execute:=FALSE);
		stAxis[GVL.cXM].mcMoveAbs(Axis:=stAxis[GVL.cXM].axisRef, Execute:=FALSE);
		stAxis[GVL.cXP].nTripCount := 0;	
		nTripCountXP := 0;	
		stAxis[GVL.cXP].bIsCalibrated := FALSE;
		nNextState:=8020;
		
	8020: //Put Shutter in Open Position
		stAxis[GVL.cXP].mcMoveAbs(Axis:=stAxis[GVL.cXP].axisRef, Position:=GVL.cPosStart, Velocity:=GVL.cPositionVel, Acceleration:=0, Deceleration:=0, Jerk:=0, Execute:=TRUE);
		stAxis[GVL.cXM].mcMoveAbs(Axis:=stAxis[GVL.cXM].axisRef, Position:=GVL.cPosEnd, Velocity:=GVL.cPositionVel, Acceleration:=0, Deceleration:=0, Jerk:=0, Execute:=TRUE);
		IF stAxis[GVL.cXP].mcMoveAbs.Done AND stAxis[GVL.cXM].mcMoveAbs.Done THEN
			stAxis[GVL.cXP].mcMoveAbs(Axis:=stAxis[GVL.cXP].axisRef, Execute:=FALSE);
			stAxis[GVL.cXM].mcMoveAbs(Axis:=stAxis[GVL.cXM].axisRef, Execute:=FALSE);
			nNextState:=8030;
		END_IF
		

	8030: //Calibrate AxisXP towards X- side.
		//record position and sequence of hall trips at rising and falling edge.
		FOR i:=GVL.cHallLower TO GVL.cHallUpper BY 1 DO
			IF GVL.nNumOfInputs[i].0 THEN
				//identifies which hall switch tripped along with if it's rising or falling edge
				stAxis[GVL.cXP].stHall[GVL.cDirPos, nTripCountXP].nSeq := INT_TO_WORD((i*10)+5);
				stAxis[GVL.cXP].stHall[GVL.cDirPos, nTripCountXP].bEdge := GVL.bInputEventState[i];
				stAxis[GVL.cXP].fHallPosCal[GVL.cDirPos, nTripCountXP] := stAxis[GVL.cXP].axisRef.NcToPlc.ActPos;
				nTripCountXP := nTripCountXP + 1;
			END_IF
		END_FOR
		//start moving axisXP towards x- side
		stAxis[GVL.cXP].mcMoveAbs(Axis:=stAxis[GVL.cXP].axisRef, Position:=GVL.cPosEnd, Velocity:=GVL.cCalibrateVel, Acceleration:=0, Deceleration:=0, Jerk:=0, Execute:=TRUE);
		IF stAxis[GVL.cXP].mcMoveAbs.Done THEN
			stAxis[GVL.cXP].mcMoveAbs(Axis:=stAxis[GVL.cXP].axisRef, Execute:=FALSE);
			nNextState:= 8040;
		END_IF
	
	8040: //Calibrate AxisXP towards X+ side.
		//record position and sequence of hall trips at rising and falling edge
		FOR i:=GVL.cHallLower TO GVL.cHallUpper BY 1 DO
			IF GVL.nNumOfInputs[i].0 THEN
				//identifies which hall switch tripped along with if it's rising or falling edge
				stAxis[GVL.cXP].stHall[GVL.cDirNeg, nTripCountXP].nSeq := INT_TO_WORD((i*10)+5);
				stAxis[GVL.cXP].stHall[GVL.cDirNeg, nTripCountXP].bEdge := GVL.bInputEventState[i];
				
				stAxis[GVL.cXP].fHallPosCal[GVL.cDirNeg, nTripCountXP] := stAxis[GVL.cXP].axisRef.NcToPlc.ActPos;
				nTripCountXP := nTripCountXP - 1;	
			
			END_IF
		END_FOR
		//start moving axisXP towards x+ side
		stAxis[GVL.cXP].mcMoveAbs(Axis:=stAxis[GVL.cXP].axisRef, Position:=GVL.cPosStart-0.1, Velocity:=GVL.cCalibrateVel, Acceleration:=0, Deceleration:=0, Jerk:=0, Execute:=TRUE);
		IF stAxis[GVL.cXP].mcMoveAbs.Done THEN
			stAxis[GVL.cXP].mcMoveAbs(Axis:=stAxis[GVL.cXP].axisRef, Execute:=FALSE);
			nNextState := 8050;
		END_IF
	
	8050: //move blade off switch to start tracking
		stAxis[GVL.cXP].mcJog(Axis := stAxis[GVL.cXP].axisRef, Mode := MC_JOGMODE_CONTINOUS, Velocity := GVL.cScanVel, JogForward := stAxis[GVL.cXP].bLimitHome);
		IF NOT stAxis[GVL.cXP].bLimitHome THEN
			stAxis[GVL.cXP].mcJog(Axis := stAxis[GVL.cXM].axisRef, Mode := MC_JOGMODE_CONTINOUS, JogForward := FALSE);
			nNextState := 8060;
		END_IF
		
	8060: //slowly home back to limit switch
		stAxis[GVL.cXP].mcJog(Axis := stAxis[GVL.cXP].axisRef, Mode := MC_JOGMODE_CONTINOUS, Velocity := GVL.cHomeVel, JogBackwards := NOT stAxis[GVL.cXP].bLimitHome);
		//a := a +1;
		IF stAxis[GVL.cXP].bLimitHome THEN
			//b := b+1;
			stAxis[GVL.cXP].mcJog(Axis := stAxis[GVL.cXP].axisRef, Mode := MC_JOGMODE_CONTINOUS, JogBackwards := FALSE);
			IF nTripCountXP = 0 THEN	
				stAxis[GVL.cXP].bIsCalibrated := TRUE; //should signal a warning to indicate bad calibration... Can be added later.
			END_IF
			nNextState := 9010;
		END_IF			
		

	(*Perform software calibration of axis xm*)
	9010: //Clear previous Calibration value
		FOR i:=0 TO GVL.cTripCount BY 1 DO
			stAxis[GVL.cXM].fHallPosCal[0,i]:=0;
			stAxis[GVL.cXM].fHallPosCal[1,i]:=0;
		END_FOR
		stAxis[GVL.cXM].nTripCount := 0;	
		nTripCountXM := 0;
		stAxis[GVL.cXM].bIsCalibrated := FALSE;
		nNextState:=9020;
		
	9020: //Put Shutter in Open Position
		stAxis[GVL.cXP].mcMoveAbs(Axis:=stAxis[GVL.cXP].axisRef, Position:=GVL.cPosStart, Velocity:=GVL.cPositionVel, Acceleration:=0, Deceleration:=0, Jerk:=0, Execute:=TRUE);
		stAxis[GVL.cXM].mcMoveAbs(Axis:=stAxis[GVL.cXM].axisRef, Position:=GVL.cPosEnd, Velocity:=GVL.cPositionVel, Acceleration:=0, Deceleration:=0, Jerk:=0, Execute:=TRUE);
		IF stAxis[GVL.cXP].mcMoveAbs.Done AND stAxis[GVL.cXM].mcMoveAbs.Done THEN
			stAxis[GVL.cXP].mcMoveAbs(Axis:=stAxis[GVL.cXP].axisRef, Execute:=FALSE);
			stAxis[GVL.cXM].mcMoveAbs(Axis:=stAxis[GVL.cXM].axisRef, Execute:=FALSE);
			nNextState:=9030;
		END_IF
	
	9030: //Calibrate stAxisGVL.cXM twoards X+ side.
		//record position and sequence of hall trips at rising and falling edge.
		FOR i:=GVL.cHallLower TO GVL.cHallUpper BY 1 DO
			IF GVL.nNumOfInputs[i].0 THEN
				//identifies which hall switch tripped along with if it's rising or falling edge
				stAxis[GVL.cXM].stHall[GVL.cDirNeg, nTripCountXM].nSeq := INT_TO_WORD((i*10)+5);
				stAxis[GVL.cXM].stHall[GVL.cDirNeg, nTripCountXM].bEdge := GVL.bInputEventState[i];
				
				stAxis[GVL.cXM].fHallPosCal[GVL.cDirNeg, nTripCountXM] := stAxis[GVL.cXM].axisRef.NcToPlc.ActPos;
				nTripCountXM := nTripCountXM + 1;	
			END_IF
		END_FOR
		//start moving stAxisGVL.cXP towards x+ side
		stAxis[GVL.cXM].mcMoveAbs(Axis:=stAxis[GVL.cXM].axisRef, Position:=GVL.cPosStart, Velocity:=GVL.cCalibrateVel, Acceleration:=0, Deceleration:=0, Jerk:=0, Execute:=TRUE);
		IF stAxis[GVL.cXM].mcMoveAbs.Done THEN
			stAxis[GVL.cXM].mcMoveAbs(Axis:=stAxis[GVL.cXP].axisRef, Execute:=FALSE);
			nNextState:= 9040;
		END_IF
	
	
	9040: //Calibrate stAxisGVL.cXM twoards X- side.
		//record position and sequence of hall trips at rising and falling edge.
		FOR i:=GVL.cHallLower TO GVL.cHallUpper BY 1 DO
			IF GVL.nNumOfInputs[i].0 THEN
				//identifies which hall switch tripped along with if it's rising or falling edge
				stAxis[GVL.cXM].stHall[GVL.cDirPos, nTripCountXM].nSeq := INT_TO_WORD((i*10)+5);
				stAxis[GVL.cXM].stHall[GVL.cDirPos, nTripCountXM].bEdge := GVL.bInputEventState[i];
				
				stAxis[GVL.cXM].fHallPosCal[GVL.cDirPos, nTripCountXM] := stAxis[GVL.cXM].axisRef.NcToPlc.ActPos;
				nTripCountXM := nTripCountXM - 1;	
			END_IF
		END_FOR
		//start moving stAxisGVL.cXP towards x- side
		stAxis[GVL.cXM].mcMoveAbs(Axis:=stAxis[GVL.cXM].axisRef, Position:=GVL.cPosEnd+0.1, Velocity:=GVL.cCalibrateVel, Acceleration:=0, Deceleration:=0, Jerk:=0, Execute:=TRUE);
		IF stAxis[GVL.cXM].mcMoveAbs.Done THEN
			stAxis[GVL.cXM].mcMoveAbs(Axis:=stAxis[GVL.cXM].axisRef, Execute:=FALSE);
			nNextState := 9050;
		END_IF
		
	9050: //move blade off switch to start tracking 
		stAxis[GVL.cXM].mcJog(Axis:=stAxis[GVL.cXM].axisRef, Mode:=MC_JOGMODE_CONTINOUS, Velocity:=GVL.cScanVel, JogBackwards:=stAxis[GVL.cXM].bLimitHome);
		IF NOT stAxis[GVL.cXM].bLimitHome THEN
			stAxis[GVL.cXM].mcJog(Axis:=stAxis[GVL.cXM].axisRef, Mode:=MC_JOGMODE_CONTINOUS, JogBackwards:=FALSE);
			nNextState := 9060;
		END_IF

	9060: //slowly homed back to switch
		stAxis[GVL.cXM].mcJog(Axis:=stAxis[GVL.cXM].axisRef, Mode:=MC_JOGMODE_CONTINOUS, Velocity:=GVL.cHomeVel, JogForward := NOT stAxis[GVL.cXM].bLimitHome);
		IF stAxis[GVL.cXM].bLimitHome THEN
			stAxis[GVL.cXM].mcJog(Axis := stAxis[GVL.cXM].axisRef, Mode := MC_JOGMODE_CONTINOUS, JogForward := FALSE);
				IF nTripCountXM=0 THEN
					stAxis[GVL.cXM].bIsCalibrated := TRUE;  //should signal a warning to indicate bad calibration... Can be added later.
				END_IF
			nNextState := 9070;
		END_IF			
		
	9070: //save calibration data to stOutCalibDone to be sent to CCS
		FOR i:=0 TO GVL.cTripCount BY 1 DO
			stOutCalibDone.hallPosCal[GVL.cXP, GVL.cDirPos, i] := stAxis[GVL.cXP].fHallPosCal[GVL.cDirPos, i];
			stOutCalibDone.hallPosCal[GVL.cXP, GVL.cDirNeg, i] := stAxis[GVL.cXP].fHallPosCal[GVL.cDirNeg, i];
			stOutCalibDone.hallPosCal[GVL.cXM, GVL.cDirPos, i] := stAxis[GVL.cXM].fHallPosCal[GVL.cDirPos, i];
			stOutCalibDone.hallPosCal[GVL.cXM, GVL.cDirNeg, i] := stAxis[GVL.cXM].fHallPosCal[GVL.cDirNeg, i];
		END_FOR
		bCalibDone := TRUE;
		nNextState :=0;
	
END_CASE

]]></ST>
    </Implementation>
    <LineIds Name="FB_StateCalibrating">
      <LineId Id="1940" Count="1" />
      <LineId Id="2225" Count="0" />
      <LineId Id="2256" Count="2" />
      <LineId Id="1943" Count="7" />
      <LineId Id="2247" Count="0" />
      <LineId Id="1951" Count="5" />
      <LineId Id="2249" Count="1" />
      <LineId Id="2131" Count="0" />
      <LineId Id="1957" Count="18" />
      <LineId Id="2189" Count="0" />
      <LineId Id="2173" Count="0" />
      <LineId Id="2193" Count="0" />
      <LineId Id="1978" Count="0" />
      <LineId Id="1980" Count="14" />
      <LineId Id="2178" Count="0" />
      <LineId Id="2180" Count="0" />
      <LineId Id="2196" Count="0" />
      <LineId Id="1996" Count="1" />
      <LineId Id="2197" Count="0" />
      <LineId Id="1999" Count="14" />
      <LineId Id="2288" Count="0" />
      <LineId Id="2015" Count="2" />
      <LineId Id="2284" Count="1" />
      <LineId Id="2018" Count="0" />
      <LineId Id="2151" Count="1" />
      <LineId Id="2019" Count="9" />
      <LineId Id="2132" Count="0" />
      <LineId Id="2029" Count="11" />
      <LineId Id="2050" Count="6" />
      <LineId Id="2184" Count="0" />
      <LineId Id="2182" Count="0" />
      <LineId Id="2200" Count="0" />
      <LineId Id="2058" Count="16" />
      <LineId Id="2205" Count="0" />
      <LineId Id="2186" Count="0" />
      <LineId Id="2204" Count="0" />
      <LineId Id="2076" Count="21" />
      <LineId Id="2153" Count="1" />
      <LineId Id="2098" Count="10" />
      <LineId Id="2248" Count="0" />
      <LineId Id="2109" Count="3" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>