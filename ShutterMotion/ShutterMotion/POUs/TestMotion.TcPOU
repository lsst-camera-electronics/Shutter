<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="TestMotion" Id="{f5ec753e-2f53-4143-ab85-291d0817da2d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TestMotion
VAR_IN_OUT
	axis  : ARRAY [XP .. XM] OF AxisGroup;
	nextInstruct, abortRequest, resetRequest, startRequest, stopRequest: BOOL;
	homeRequest : BYTE;
		
	//statemachine
	stateLVL1 : INT;
	
END_VAR
VAR_INPUT

	speed : LREAL;	

END_VAR
VAR_OUTPUT
END_VAR
VAR
	//testvar
	test : INT;
	
	
	//Axis
	//xp : Axis;
	//xm : Axis;	
	
	//state-machine
	stateLVL2 : INT;
	initStateLVL2 : BOOL;
	motionBusy : BOOL;
	
	//Direction
	directionXP : BOOL;
	
	//counter
	i 	: INT :=0;
	j	: INT :=0;
	

END_VAR
VAR CONSTANT
	BRAKE_OFF_C		: BOOL	:= TRUE;
	BRAKE_ON_C		: BOOL	:= FALSE;
	HOME_VEL_C		: LREAL	:= 30;
	CALIBRATE_VEL_C	: LREAL	:= 60;
	POSITION_VEL_C	: LREAL := 300;
	POS_START_C		: LREAL := 0;
	POS_END_C		: LREAL := 750;
	HOMEOFFSET_XP_C	: LREAL	:= (POS_START_C+35);
	HOMEOFFSET_XM_C	: LREAL	:= (POS_END_C-85);
	
	//SIZE_HALL_SW_C 	: LREAL := SIZEOF(GVL.hallPosCalXP);
	
	//For indexing axis
	XP : INT := 0;
	XM : INT := 1;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[axis[XP].axisRef.ReadStatus();
axis[XM].axisRef.ReadStatus();


//reset input
IF abortRequest THEN
	abortRequest := FALSE;
	stateLVL1 := -1; 
END_IF
IF resetRequest THEN
	resetRequest := FALSE;
	stateLVL1 := 0;
END_IF


CASE stateLVL1 OF
	-1: //Abort state. Disable movement
		axis[XP].mcPower(Axis := axis[XP].axisRef, Enable := TRUE, Enable_Positive := FALSE, Enable_Negative := FALSE);
		axis[XM].mcPower(Axis := axis[XM].axisRef, Enable := TRUE, Enable_Positive := FALSE, Enable_Negative := FALSE);	
		axis[XP].mcHome(Axis := axis[XP].axisRef, Execute := FALSE);
		axis[XM].mcHome(Axis := axis[XP].axisRef, Execute := FALSE);
		axis[XP].mcReset(Axis := axis[XP].axisRef, Execute := FALSE);
		axis[XM].mcReset(Axis := axis[XM].axisRef, Execute := FALSE);
		axis[XP].brake := BRAKE_ON_C;
		axis[XM].brake := BRAKE_ON_C;
		nextInstruct := FALSE;
		GVL.fbWaitTimer(IN:=FALSE);
		
	0: //reset state
		motionBusy := FALSE;
		initStateLVL2 := FALSE;
		nextInstruct := FALSE;
		axis[XP].mcReset(Axis := axis[XP].axisRef, Execute := TRUE, ErrorID => axis[XP].errorID);
		axis[XM].mcReset(Axis := axis[XM].axisRef, Execute := TRUE, ErrorID => axis[XM].errorID);
		IF axis[XP].mcReset.Error OR axis[XM].mcReset.Error THEN
			axis[XP].mcPower(Axis := axis[XP].axisRef, Enable := TRUE, Enable_Positive := FALSE, Enable_Negative := FALSE);
			axis[XM].mcPower(Axis := axis[XM].axisRef, Enable := TRUE, Enable_Positive := FALSE, Enable_Negative := FALSE);
			axis[XP].brake := BRAKE_ON_C;
			axis[XM].brake := BRAKE_ON_C;
			stateLVL1 		:= -1; //go to stop state
			stateLVL2		:=0;
							GVL.testINT2 := GVL.testINT2 +1;//-------------------------------------------
			//Should report an error flag go to error handle state
		ELSIF axis[XP].mcReset.Done AND axis[XM].mcReset.Done THEN
			axis[XP].mcPower(Axis := axis[XP].axisRef, Enable := TRUE, Enable_Positive := TRUE, Enable_Negative := TRUE);
			axis[XM].mcPower(Axis := axis[XM].axisRef, Enable := TRUE, Enable_Positive := TRUE, Enable_Negative := TRUE);
			axis[XP].mcReset(Axis := axis[XP].axisRef, Execute := FALSE);
			axis[XM].mcReset(Axis := axis[XM].axisRef, Execute := FALSE);
			axis[XP].brake := BRAKE_OFF_C;
			axis[XM].brake := BRAKE_OFF_C;
			axis[XP].mcStop(Axis:=axis[XP].axisRef, Execute:=FALSE);
			axis[XM].mcStop(Axis:=axis[XM].axisRef, Execute:=FALSE);
			stateLVL1 	:= 100; //go to stop state
			stateLVL2	:=0;				
		END_IF

		
	100: //stop state
		axis[XP].mcMoveAbs(Axis := axis[XP].axisRef, Execute := FALSE);
		axis[XM].mcMoveAbs(Axis := axis[XM].axisRef, Execute := FALSE);
		axis[XP].mcHome(Axis := axis[XP].axisRef, Execute := FALSE);
		axis[XM].mcHome(Axis := axis[XP].axisRef, Execute := FALSE);
		stateLVL2 := 0;
		GVL.fbWaitTimer(IN:=FALSE);

	
	
	400: //Homing start for both blades
		homeShutter();
		IF motionBusy = FALSE THEN
			stateLVL1:=100;
		END_IF


	//States higher than 400 requires HOMING ROUTINE to be ran first.
	//////////////////////////////////////////////////////////////////////////////////////////////
	//Basic Motions
	//////////////////////////////////////////////////////////////////////////////////////////////	

	1000: //Open shutter
		openShutter();
		IF motionBusy = FALSE THEN
			stateLVL1:=100;
		END_IF
		
	1100: //Close shutter towards X+ side. 
		closeShutterPlus();
		IF motionBusy = FALSE THEN
			stateLVL1:=100;
		END_IF
		
	1200: //Close shutter towards X- side. 
		closeShutterMinus();
		IF motionBusy = FALSE THEN
			stateLVL1:=100;
		END_IF
		
	1300: //AxisXP absolute move
		axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Position:=GVL.setPosition, Velocity:=speed, Execute:=TRUE);
		IF axis[XP].mcMoveAbs.Done THEN
			axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Execute:=FALSE);
			stateLVL1 := 100;
		END_IF
	
	1400: //AxisXP jog

	1500: //AxisXM move absolute
		axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Position:=GVL.setPosition, Velocity:=speed, Execute:=TRUE);
		IF axis[XM].mcMoveAbs.Done THEN
			axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Execute:=FALSE);
			stateLVL1 := 100;
		END_IF
		
	1600: //AxisXM jog

	
	//////////////////////////////////////////////////////////////////////////////////////////////
	//Motion for visit - NORMAL MODE
	//////////////////////////////////////////////////////////////////////////////////////////////	

	2000: //Normal Visit. Put both blades in position at 0 mm - Shutter closed
		axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Position:=POS_START_C, Velocity:=POSITION_VEL_C, Execute:=TRUE);
		IF axis[XP].mcMoveAbs.Done THEN
			axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Execute:=FALSE);
			axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Position:=POS_START_C, Velocity:=POSITION_VEL_C, Execute:=TRUE);
			IF  axis[XM].mcMoveAbs.Done THEN
				axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Execute:=FALSE);
				stateLVL1:=2010;
			END_IF	
		END_IF
	
	2010: //Normal Visit. Blade in position. Wait for input to continue.
		IF nextInstruct THEN
			nextInstruct:=FALSE;
			stateLVL1:=2100;
		END_IF
		
	2100: //Normal Visit. Visit 1 sequence - axisXM travels to end of X- side after set time elapsed - Shutter open
		GVL.fbWaitTimer(IN:=TRUE, PT:=GVL.expoTime,);
		axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Position:=POS_END_C, Velocity:=speed, Execute:=TRUE);
		IF axis[XM].mcMoveAbs.Done AND GVL.fbWaitTimer.Q THEN
			GVL.fbWaitTimer(IN:=FALSE);
			axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Execute:=FALSE);
			stateLVL1:=2110;
		END_IF

	2110: //Normal Visit. Visit 1 sequence - axisXP travels to end of X- side - Shutter close
		axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Position:=POS_END_C, Velocity:=speed, Execute:=TRUE);
		IF axis[XP].mcMoveAbs.Done THEN
			axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Execute:=FALSE);
			stateLVL1:=2120;
		END_IF
		
	2120: //Normal Visit. Pause at the end of first visit. Wait for input to continue
		GVL.fbWaitTimer(IN:=TRUE, PT:=T#2S);
		IF nextInstruct OR GVL.fbWaitTimer.Q THEN
			GVL.fbWaitTimer(IN:=FALSE);
			nextInstruct:=FALSE;
			stateLVL1:=2200;
		END_IF
	
	2200: //Normal Visit. Visit 2 sequence - axisXP travels to X+ side - Shutter open
		GVL.fbWaitTimer(IN:=TRUE, PT:=GVL.expoTime,);
		axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Position:=POS_START_C, Velocity:=speed, Execute:=TRUE);
		IF axis[XP].mcMoveAbs.Done AND GVL.fbWaitTimer.Q THEN
			GVL.fbWaitTimer(IN:=FALSE);
			axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Execute:=FALSE);
			stateLVL1:=2210;
		END_IF
		
	2210: //Normal Visit. Visit 2 sequence - axisXM travels to X+ side - Shutter close
		axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Position:=POS_START_C, Velocity:=speed, Execute:=TRUE);
		IF axis[XM].mcMoveAbs.Done THEN
			axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Execute:=FALSE);
			stateLVL1:=100;
		END_IF
	

	//////////////////////////////////////////////////////////////////////////////////////////////
	//Cycler -- for use in testing shutter cycle
	//////////////////////////////////////////////////////////////////////////////////////////////
		
	3100: //Cycler sequence 
		cycler();
		IF motionBusy = FALSE THEN
			stateLVL1:=100;
		END_IF	

	//////////////////////////////////////////////////////////////////////////////////////////////
	//Soft Calibration
	//////////////////////////////////////////////////////////////////////////////////////////////

	8000: //Clear previous Calibration value
		calibrateXP();
		calibrateXM();
		//openShutter();
		IF motionBusy = FALSE THEN
			stateLVL1:=100;
		END_IF

END_CASE


//Need to rewrite this so that it will work with 2 axis running.------------------------------------------
IF stateLVL1 <> 400 THEN
	
	//Actual Position Calc AxisXP
	FOR i:=GVL.HALL_LL_XP_C TO GVL.HALL_UL_XP_C BY 1 DO
		axis[XP].hallSigCal_rtrig[i](CLK:=GVL.hallSwitch[i]);
		axis[XP].hallSigCal_ftrig[i](CLK:=GVL.hallSwitch[i]);
		IF axis[XP].hallSigCal_rtrig[i].Q OR axis[XP].hallSigCal_ftrig[i].Q THEN
			IF axis[XP].axisRef.status.PositiveDirection THEN
				axis[XP].hallPosAct := axis[XP].hallPosCal[0, i, axis[XP].tripCount[i]];
				axis[XP].tripCount[i] := axis[XP].tripCount[i] + 1;	
			END_IF
			IF axis[XP].axisRef.status.NegativeDirection THEN
				axis[XP].hallPosAct := axis[XP].hallPosCal[1, i, axis[XP].tripCount[i]];
				axis[XP].tripCount[i] := axis[XP].tripCount[i] - 1;	
			END_IF
		END_IF
	END_FOR
	//Actual Position Calc AxisXM
	FOR i:=GVL.HALL_LL_XM_C TO GVL.HALL_UL_XM_C BY 1 DO
		axis[XM].hallSigCal_rtrig[i](CLK:=GVL.hallSwitch[i]);
		axis[XM].hallSigCal_ftrig[i](CLK:=GVL.hallSwitch[i]);
		IF axis[XM].hallSigCal_rtrig[i].Q OR axis[XM].hallSigCal_ftrig[i].Q THEN
			IF axis[XM].axisRef.status.PositiveDirection THEN
				axis[XM].hallPosAct := axis[XM].hallPosCal[0, i, axis[XM].tripCount[i]];
				axis[XM].tripCount[i] := axis[XM].tripCount[i] - 1;	
			END_IF
			IF axis[XM].axisRef.status.NegativeDirection THEN
				axis[XM].hallPosAct := axis[XM].hallPosCal[1, i, axis[XM].tripCount[i]];
				axis[XM].tripCount[i] := axis[XM].tripCount[i] + 1;	
			END_IF
		END_IF
	END_FOR

ELSE
	
	FOR i:=GVL.HALL_LL_XP_C TO GVL.HALL_UL_XM_C BY 1 DO
			axis[XP].tripCount[i] := 0;	
			axis[XM].tripCount[i] := 0;
	END_FOR
	
END_IF
]]></ST>
    </Implementation>
    <Action Name="calibrateXM" Id="{f55b06c7-6108-4c5a-8395-ce4a40ab5ee7}">
      <Implementation>
        <ST><![CDATA[IF initStateLVL2 = FALSE THEN
	initStateLVL2 := TRUE;
	stateLVL2 :=9010;
	motionBusy := TRUE;
END_IF	

CASE stateLVL2 OF
	
	9010: //Clear previous Calibration value
		FOR i:=GVL.HALL_LL_XP_C TO GVL.HALL_UL_XP_C BY 1 DO
			FOR j:=0 TO GVL.HALL_TRIP_C BY 1 DO
				axis[XM].hallPosCal[0,i,j]:=0;
				axis[XM].hallPosCal[1,i,j]:=0;
			END_FOR
		END_FOR
		FOR i:=GVL.HALL_LL_XM_C TO GVL.HALL_UL_XM_C BY 1 DO
				axis[XM].tripCount[i] := 0;	
		END_FOR
		stateLVL2:=9020;
		
	9020: //Put Shutter in Open Position
		axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Position:= POS_START_C, Velocity:=POSITION_VEL_C, Execute:=TRUE);
		axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Position:= POS_END_C, Velocity:=POSITION_VEL_C, Execute:=TRUE);
		IF axis[XP].mcMoveAbs.Done AND axis[XM].mcMoveAbs.Done THEN
			axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Execute:=FALSE);
			axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Execute:=FALSE);
			stateLVL2:=9030;
		END_IF
		
		//This section is required to get rid of false trigger when system starts up
		FOR i:=GVL.HALL_LL_XM_C TO GVL.HALL_UL_XM_C BY 1 DO
			axis[XM].hallSigCal_rtrig[i](CLK:=GVL.hallSwitch[i]);
			axis[XM].hallSigCal_ftrig[i](CLK:=GVL.hallSwitch[i]);
			IF axis[XM].hallSigCal_rtrig[i].Q OR axis[XM].hallSigCal_ftrig[i].Q THEN
				; //do nothing
			END_IF
		END_FOR	

	
	9030: //Calibrate AxisXM twoards X+ side.
		//record hall trips at rising and falling edge
		FOR i:=GVL.HALL_LL_XM_C TO GVL.HALL_UL_XM_C BY 1 DO
			axis[XM].hallSigCal_rtrig[i](CLK:=GVL.hallSwitch[i]);
			axis[XM].hallSigCal_ftrig[i](CLK:=GVL.hallSwitch[i]);
			IF axis[XM].hallSigCal_rtrig[i].Q OR axis[XM].hallSigCal_ftrig[i].Q THEN	
				axis[XM].hallPosCal[1, i, axis[XM].tripCount[i]] := axis[XM].axisRef.NcToPlc.ActPos;
				axis[XM].tripCount[i] := axis[XM].tripCount[i] + 1;		
			END_IF
		END_FOR

		//start moving axisXP towards x+ side
		axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Position:=POS_START_C, Velocity:=CALIBRATE_VEL_C, Execute:=TRUE);
		IF axis[XM].mcMoveAbs.Done THEN
			axis[XM].mcMoveAbs(Axis:=axis[XP].axisRef, Execute:=FALSE);
			stateLVL2:= 9040;
		END_IF
	
	
	9040: //Calibrate AxisXM twoards X- side.
		//record hall trips at rising and falling edge
		FOR i:=GVL.HALL_LL_XM_C TO GVL.HALL_UL_XM_C BY 1 DO
			axis[XM].hallSigCal_rtrig[i](CLK:=GVL.hallSwitch[i]);
			axis[XM].hallSigCal_ftrig[i](CLK:=GVL.hallSwitch[i]);
			IF axis[XM].hallSigCal_rtrig[i].Q OR axis[XM].hallSigCal_ftrig[i].Q THEN	
				axis[XM].hallPosCal[0, i, axis[XM].tripCount[i]] := axis[XM].axisRef.NcToPlc.ActPos;
				axis[XM].tripCount[i] := axis[XM].tripCount[i] - 1;		
			END_IF
		END_FOR
	
		//start moving axisXP towards x- side
		axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Position:=POS_END_C, Velocity:=CALIBRATE_VEL_C, Execute:=TRUE);
		IF axis[XM].mcMoveAbs.Done THEN
			axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Execute:=FALSE);
			stateLVL2 := 9050;
		END_IF

	9050: //End action
		initStateLVL2 := FALSE;
		stateLVL2 := 0;
		motionBusy := FALSE;


END_CASE
]]></ST>
      </Implementation>
    </Action>
    <Action Name="calibrateXP" Id="{79108831-3b18-418a-a130-e890c3b4b0b4}">
      <Implementation>
        <ST><![CDATA[IF initStateLVL2 = FALSE THEN
	initStateLVL2 := TRUE;
	stateLVL2 :=8010;
	motionBusy := TRUE;
	test := test+1;
END_IF	

CASE stateLVL2 OF

	8010: //Clear previous Calibration value
		FOR i:=GVL.HALL_LL_XP_C TO GVL.HALL_UL_XP_C BY 1 DO
			FOR j:=0 TO GVL.HALL_TRIP_C BY 1 DO
				axis[XP].hallPosCal[0,i,j]:=0;
				axis[XP].hallPosCal[1,i,j]:=0;
			END_FOR
		END_FOR
		FOR i:=GVL.HALL_LL_XP_C TO GVL.HALL_UL_XP_C BY 1 DO
				axis[XP].tripCount[i] := 0;	
		END_FOR
		stateLVL2:=8020;
		
	8020: //Put Shutter in Open Position
		axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Position:= POS_START_C, Velocity:=POSITION_VEL_C, Execute:=TRUE);
		axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Position:= POS_END_C, Velocity:=POSITION_VEL_C, Execute:=TRUE);
		IF axis[XP].mcMoveAbs.Done AND axis[XM].mcMoveAbs.Done THEN
			axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Execute:=FALSE);
			axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Execute:=FALSE);
			stateLVL2:=8030;
		END_IF
		
		//This section is required to get rid of false trigger when system starts up
		FOR i:=GVL.HALL_LL_XP_C TO GVL.HALL_UL_XP_C BY 1 DO
			axis[XP].hallSigCal_rtrig[i](CLK:=GVL.hallSwitch[i]);
			axis[XP].hallSigCal_ftrig[i](CLK:=GVL.hallSwitch[i]);
			IF axis[XP].hallSigCal_rtrig[i].Q OR axis[XP].hallSigCal_ftrig[i].Q THEN
				; //do nothing
			END_IF
		END_FOR

	8030: //Calibrate AxisXP towards X- side.
		//record hall trips at rising and falling edge
		FOR i:=GVL.HALL_LL_XP_C TO GVL.HALL_UL_XP_C BY 1 DO
			axis[XP].hallSigCal_rtrig[i](CLK:=GVL.hallSwitch[i]);
			axis[XP].hallSigCal_ftrig[i](CLK:=GVL.hallSwitch[i]);
			IF axis[XP].hallSigCal_rtrig[i].Q OR axis[XP].hallSigCal_ftrig[i].Q THEN	
				axis[XP].hallPosCal[0, i, axis[XP].tripCount[i]] := axis[XP].axisRef.NcToPlc.ActPos;
				axis[XP].tripCount[i] := axis[XP].tripCount[i] + 1;		
			END_IF
		END_FOR
	
		//start moving axisXP towards x- side
		axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Position:=POS_END_C, Velocity:=CALIBRATE_VEL_C, Execute:=TRUE);
		IF axis[XP].mcMoveAbs.Done THEN
			axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Execute:=FALSE);
			stateLVL2:= 8040;
		END_IF
	
		
	8040: //Calibrate AxisXP towards X+ side.
		//record hall trips at rising and falling edge
		FOR i:=GVL.HALL_LL_XP_C TO GVL.HALL_UL_XP_C BY 1 DO
			axis[XP].hallSigCal_rtrig[i](CLK:=GVL.hallSwitch[i]);
			axis[XP].hallSigCal_ftrig[i](CLK:=GVL.hallSwitch[i]);
			IF axis[XP].hallSigCal_rtrig[i].Q OR axis[XP].hallSigCal_ftrig[i].Q THEN
				axis[XP].hallPosCal[1, i, axis[XP].tripCount[i]] := axis[XP].axisRef.NcToPlc.ActPos;
				axis[XP].tripCount[i] := axis[XP].tripCount[i] - 1;	
			END_IF
		END_FOR
	
		//start moving axisXP towards x+ side
		axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Position:=POS_START_C, Velocity:=CALIBRATE_VEL_C, Execute:=TRUE);
		IF axis[XP].mcMoveAbs.Done THEN
			axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Execute:=FALSE);
			stateLVL2 := 8050;
		END_IF
	
	8050: //End action
		initStateLVL2 := FALSE;
		stateLVL2 := 0;
		motionBusy := FALSE;

	
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="closeShutterMinus" Id="{c8eebc4c-d2a0-42de-82dc-8e5673de86c8}">
      <Implementation>
        <ST><![CDATA[IF initStateLVL2 = FALSE THEN
	initStateLVL2 := TRUE;
	stateLVL2 :=1210;
	motionBusy := TRUE;
END_IF

CASE stateLVL2 OF
	
	1210://Close shutter towards X- side. AxisXM retracts to its HOME position (~750 mm)
		axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Position:= POS_END_C, Velocity:=speed, Execute:=TRUE);
		IF axis[XM].mcMoveAbs.Done THEN
			axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Execute:=FALSE);
			stateLVL2:=1220;
		END_IF
		
	1220: //Close shutter towards X- side. AxisXP extends to its DEPLOYED position
		axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Position:= POS_END_C, Velocity:=speed, Execute:=TRUE);
		IF axis[XP].mcMoveAbs.Done THEN
			axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Execute:=FALSE);
			stateLVL2 := 1230;
		END_IF
		
	1230: //End Action
		initStateLVL2 := FALSE;
		stateLVL2 := 0;
		motionBusy := FALSE;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="closeShutterPlus" Id="{43ef5e05-4492-480d-abe4-6a35baea3693}">
      <Implementation>
        <ST><![CDATA[IF initStateLVL2 = FALSE THEN
	initStateLVL2 := TRUE;
	stateLVL2 :=1110;
	motionBusy := TRUE;
END_IF

CASE stateLVL2 OF
	
	1110: //Close shutter towards X+ side. axisXP retracts to its HOME position
		axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Position:= POS_START_C, Velocity:=speed, Execute:=TRUE);
		IF axis[XP].mcMoveAbs.Done THEN
			axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Execute:=FALSE);
			stateLVL2:=1120;
		END_IF
		
	1120: //Close shutter towards X+ side. AxisXM extends to its DEPLOYED position 
		axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Position:= POS_START_C, Velocity:=speed, Execute:=TRUE);
		IF axis[XM].mcMoveAbs.Done THEN
			axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Execute:=FALSE);
			stateLVL2 := 1130;
		END_IF
	
	1130: //End Action
		initStateLVL2 := FALSE;
		stateLVL2 := 0;
		motionBusy := FALSE;
END_CASE
]]></ST>
      </Implementation>
    </Action>
    <Action Name="cycler" Id="{b3bb7fae-23b4-40ef-bb63-00745722aa1f}">
      <Implementation>
        <ST><![CDATA[IF initStateLVL2 = FALSE THEN
	initStateLVL2 := TRUE;
	stateLVL2 :=3010;
	motionBusy := TRUE;
END_IF	


CASE stateLVL2 OF
	3010: //Cycler sequence - axisXM travels to end of X- side after set time elapsed - Shutter open
		GVL.fbWaitTimer(IN:=TRUE, PT:=GVL.expoTime,);
		axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Position:=POS_END_C, Velocity:=speed, Execute:=TRUE);
		IF axis[XM].mcMoveAbs.Done AND GVL.fbWaitTimer.Q THEN
			GVL.fbWaitTimer(IN:=FALSE);
			axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Execute:=FALSE);
			stateLVL2:=3020;
			IF stopRequest THEN
				stopRequest:=FALSE;
				stateLVL2:=3070;
			END_IF
		END_IF


	3020: //Cycler sequence - axisXP travels to end of X- side - Shutter close
		axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Position:=POS_END_C, Velocity:=speed, Execute:=TRUE);
		IF axis[XP].mcMoveAbs.Done THEN
			axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Execute:=FALSE);
			stateLVL2:=3030;
			IF stopRequest THEN
				stopRequest:=FALSE;
				stateLVL2:=3070;
			END_IF
		END_IF
		
		
	3030: //Pause at the end of travel. Wait for input or timer to continue
		GVL.fbWaitTimer(IN:=TRUE, PT:=T#1S);
		IF nextInstruct OR GVL.fbWaitTimer.Q THEN
			GVL.fbWaitTimer(IN:=FALSE);
			nextInstruct:=FALSE;
			stateLVL2:=3040;
			IF stopRequest THEN
				stopRequest:=FALSE;
				stateLVL2:=3070;
			END_IF
		END_IF
	
	3040: //axisXP travels to X+ side - Shutter open
		GVL.fbWaitTimer(IN:=TRUE, PT:=GVL.expoTime,);
		axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Position:=POS_START_C, Velocity:=speed, Execute:=TRUE);
		IF axis[XP].mcMoveAbs.Done AND GVL.fbWaitTimer.Q THEN
			GVL.fbWaitTimer(IN:=FALSE);
			axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Execute:=FALSE);
			stateLVL2:=3050;
			IF stopRequest THEN
				stopRequest:=FALSE;
				stateLVL2:=3070;
			END_IF
		END_IF
		
	3050: //axisXM travels to X+ side - Shutter close
		axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Position:=POS_START_C, Velocity:=speed, Execute:=TRUE);
		IF axis[XM].mcMoveAbs.Done THEN
			axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Execute:=FALSE);
			stateLVL2:=3060;
			IF stopRequest THEN
				stopRequest:=FALSE;
				stateLVL2:=3070;
			END_IF
		END_IF
		
	3060: //Pause at the end of travel. Wait for input or timer to continue
		GVL.fbWaitTimer(IN:=TRUE, PT:=T#1S);
		IF nextInstruct OR GVL.fbWaitTimer.Q THEN
			GVL.fbWaitTimer(IN:=FALSE);
			nextInstruct:=FALSE;
			stateLVL2:=3010;
			IF stopRequest THEN
				stopRequest:=FALSE;
				stateLVL2:=3070;
			END_IF
		END_IF
		
	3070: //End Action
		initStateLVL2 := FALSE;
		stateLVL2 := 0;
		motionBusy := FALSE;
	
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="homeShutter" Id="{d8e97ce7-cf41-48a3-a05c-454159a95cee}">
      <Implementation>
        <ST><![CDATA[IF initStateLVL2 = FALSE THEN
	initStateLVL2 := TRUE;
	stateLVL2 :=410;
	motionBusy := TRUE;
END_IF	

CASE stateLVL2 OF
	
	410: //Homing start for both blades
		axis[XP].mcHome(Axis := axis[XP].axisRef, Position := HOMEOFFSET_XP_C, bCalibrationCam := axis[XP].limitHome, Execute := TRUE);
		axis[XM].mcHome(Axis := axis[XM].axisRef, Position := HOMEOFFSET_XM_C, bCalibrationCam := axis[XM].limitHome, Execute := TRUE);
		IF axis[XP].mcHome.Done AND axis[XM].mcHome.Done THEN
			stateLVL2 := 420;
		END_IF
		
	420: //Homing running for both blades
		IF NOT axis[XP].mcHome.Error AND NOT axis[XM].mcHome.Error THEN
			axis[XP].mcHome(Axis := axis[XP].axisRef, Execute := FALSE);
			axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Velocity:=HOME_VEL_C, Position:=POS_START_C, Execute:= TRUE,);
			axis[XM].mcHome(Axis := axis[XM].axisRef, Execute := FALSE);
			axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Velocity:=HOME_VEL_C, Position:=POS_END_C, Execute:= TRUE);
			IF axis[XP].mcMoveAbs.Done AND axis[XM].mcMoveAbs.Done THEN
				axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Execute:= FALSE);
				axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Execute:= FALSE);
				stateLVL2 := 430;
			END_IF
		ELSE
			stateLVL2 := 430;
			//Should report an Error
		END_IF

	430: //End Action
		initStateLVL2 := FALSE;
		stateLVL2 := 0;
		motionBusy := FALSE;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="openShutter" Id="{f7febd62-8f52-4abd-992a-fedae8687624}">
      <Implementation>
        <ST><![CDATA[IF initStateLVL2 = FALSE THEN
	initStateLVL2 := TRUE;
	stateLVL2 :=1010;
	motionBusy := TRUE;
END_IF	

CASE stateLVL2 OF
	
	1010:
		motionBusy := TRUE;
		axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Position:= POS_START_C, Velocity:=speed, Execute:=TRUE);
		axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Position:= POS_END_C, Velocity:=speed, Execute:=TRUE);
		IF axis[XP].mcMoveAbs.Done AND axis[XM].mcMoveAbs.Done THEN
			axis[XP].mcMoveAbs(Axis:=axis[XP].axisRef, Execute:=FALSE);
			axis[XM].mcMoveAbs(Axis:=axis[XM].axisRef, Execute:=FALSE);
			stateLVL2 := 1020;
		END_IF	
		
	1020: //End action
		initStateLVL2 := FALSE;
		stateLVL2 := 0;
		motionBusy := FALSE;
		
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="Visit" Id="{290a6cba-5f49-4def-a018-860e2635ef48}">
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="TestMotion">
      <LineId Id="2584" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="150" Count="1" />
      <LineId Id="153" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="2395" Count="0" />
      <LineId Id="695" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="368" Count="0" />
      <LineId Id="2075" Count="0" />
      <LineId Id="648" Count="1" />
      <LineId Id="2633" Count="1" />
      <LineId Id="2628" Count="1" />
      <LineId Id="571" Count="0" />
      <LineId Id="1895" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="2473" Count="0" />
      <LineId Id="2477" Count="0" />
      <LineId Id="572" Count="0" />
      <LineId Id="77" Count="2" />
      <LineId Id="2777" Count="5" />
      <LineId Id="2795" Count="0" />
      <LineId Id="2783" Count="0" />
      <LineId Id="82" Count="2" />
      <LineId Id="165" Count="1" />
      <LineId Id="155" Count="0" />
      <LineId Id="2631" Count="0" />
      <LineId Id="2797" Count="1" />
      <LineId Id="2792" Count="1" />
      <LineId Id="85" Count="0" />
      <LineId Id="1690" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="86" Count="1" />
      <LineId Id="101" Count="1" />
      <LineId Id="2478" Count="0" />
      <LineId Id="1894" Count="0" />
      <LineId Id="1447" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="2601" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="2599" Count="1" />
      <LineId Id="168" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="550" Count="0" />
      <LineId Id="556" Count="0" />
      <LineId Id="2621" Count="1" />
      <LineId Id="1976" Count="0" />
      <LineId Id="361" Count="0" />
      <LineId Id="2432" Count="0" />
      <LineId Id="2418" Count="0" />
      <LineId Id="2427" Count="1" />
      <LineId Id="401" Count="0" />
      <LineId Id="416" Count="1" />
      <LineId Id="2444" Count="0" />
      <LineId Id="2448" Count="1" />
      <LineId Id="431" Count="0" />
      <LineId Id="423" Count="0" />
      <LineId Id="2479" Count="3" />
      <LineId Id="495" Count="0" />
      <LineId Id="2593" Count="0" />
      <LineId Id="2598" Count="0" />
      <LineId Id="2602" Count="1" />
      <LineId Id="2605" Count="0" />
      <LineId Id="2604" Count="0" />
      <LineId Id="2594" Count="1" />
      <LineId Id="2606" Count="2" />
      <LineId Id="2701" Count="4" />
      <LineId Id="2609" Count="0" />
      <LineId Id="552" Count="0" />
      <LineId Id="2613" Count="0" />
      <LineId Id="2611" Count="0" />
      <LineId Id="554" Count="0" />
      <LineId Id="553" Count="0" />
      <LineId Id="2612" Count="0" />
      <LineId Id="496" Count="1" />
      <LineId Id="504" Count="1" />
      <LineId Id="1701" Count="1" />
      <LineId Id="1705" Count="0" />
      <LineId Id="1703" Count="1" />
      <LineId Id="506" Count="0" />
      <LineId Id="509" Count="0" />
      <LineId Id="544" Count="0" />
      <LineId Id="546" Count="1" />
      <LineId Id="549" Count="0" />
      <LineId Id="548" Count="0" />
      <LineId Id="545" Count="0" />
      <LineId Id="518" Count="0" />
      <LineId Id="1473" Count="0" />
      <LineId Id="519" Count="0" />
      <LineId Id="521" Count="0" />
      <LineId Id="1476" Count="0" />
      <LineId Id="522" Count="0" />
      <LineId Id="524" Count="0" />
      <LineId Id="523" Count="0" />
      <LineId Id="520" Count="0" />
      <LineId Id="525" Count="0" />
      <LineId Id="531" Count="4" />
      <LineId Id="526" Count="1" />
      <LineId Id="1559" Count="2" />
      <LineId Id="536" Count="0" />
      <LineId Id="512" Count="1" />
      <LineId Id="498" Count="1" />
      <LineId Id="1477" Count="0" />
      <LineId Id="539" Count="1" />
      <LineId Id="1478" Count="0" />
      <LineId Id="541" Count="2" />
      <LineId Id="557" Count="2" />
      <LineId Id="561" Count="1" />
      <LineId Id="564" Count="0" />
      <LineId Id="563" Count="0" />
      <LineId Id="560" Count="0" />
      <LineId Id="2614" Count="3" />
      <LineId Id="1788" Count="0" />
      <LineId Id="1790" Count="0" />
      <LineId Id="2641" Count="0" />
      <LineId Id="1791" Count="0" />
      <LineId Id="2639" Count="1" />
      <LineId Id="1787" Count="0" />
      <LineId Id="2618" Count="2" />
      <LineId Id="538" Count="0" />
      <LineId Id="1160" Count="0" />
      <LineId Id="1166" Count="0" />
      <LineId Id="2623" Count="4" />
      <LineId Id="2304" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="696" Count="0" />
      <LineId Id="2939" Count="1" />
      <LineId Id="2855" Count="1" />
      <LineId Id="906" Count="0" />
      <LineId Id="1371" Count="3" />
      <LineId Id="1405" Count="1" />
      <LineId Id="1408" Count="0" />
      <LineId Id="1407" Count="0" />
      <LineId Id="1684" Count="0" />
      <LineId Id="1687" Count="2" />
      <LineId Id="1381" Count="1" />
      <LineId Id="2325" Count="14" />
      <LineId Id="1711" Count="0" />
      <LineId Id="2913" Count="0" />
      <LineId Id="2928" Count="0" />
      <LineId Id="2915" Count="0" />
      <LineId Id="2936" Count="0" />
      <LineId Id="2938" Count="0" />
      <LineId Id="2937" Count="0" />
      <LineId Id="2929" Count="0" />
      <LineId Id="2533" Count="0" />
      <LineId Id="1450" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="TestMotion.calibrateXM">
      <LineId Id="71" Count="6" />
      <LineId Id="79" Count="0" />
      <LineId Id="128" Count="1" />
      <LineId Id="164" Count="1" />
      <LineId Id="132" Count="23" />
      <LineId Id="126" Count="1" />
      <LineId Id="81" Count="5" />
      <LineId Id="166" Count="0" />
      <LineId Id="88" Count="29" />
      <LineId Id="157" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="158" Count="1" />
      <LineId Id="80" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="TestMotion.calibrateXP">
      <LineId Id="150" Count="2" />
      <LineId Id="167" Count="0" />
      <LineId Id="153" Count="2" />
      <LineId Id="80" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="81" Count="2" />
      <LineId Id="168" Count="0" />
      <LineId Id="87" Count="3" />
      <LineId Id="92" Count="38" />
      <LineId Id="161" Count="0" />
      <LineId Id="131" Count="17" />
      <LineId Id="162" Count="0" />
      <LineId Id="165" Count="1" />
      <LineId Id="163" Count="1" />
      <LineId Id="158" Count="1" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="TestMotion.closeShutterMinus">
      <LineId Id="2" Count="4" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="7" Count="12" />
      <LineId Id="24" Count="4" />
      <LineId Id="22" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="TestMotion.closeShutterPlus">
      <LineId Id="23" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="2" Count="9" />
      <LineId Id="26" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="31" Count="3" />
      <LineId Id="20" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="TestMotion.cycler">
      <LineId Id="78" Count="3" />
      <LineId Id="76" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="2" Count="72" />
      <LineId Id="84" Count="1" />
      <LineId Id="75" Count="0" />
      <LineId Id="87" Count="1" />
      <LineId Id="86" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="TestMotion.homeShutter">
      <LineId Id="31" Count="3" />
      <LineId Id="29" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="2" Count="17" />
      <LineId Id="40" Count="0" />
      <LineId Id="20" Count="2" />
      <LineId Id="38" Count="0" />
      <LineId Id="44" Count="2" />
      <LineId Id="39" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="TestMotion.openShutter">
      <LineId Id="12" Count="3" />
      <LineId Id="10" Count="1" />
      <LineId Id="18" Count="1" />
      <LineId Id="2" Count="7" />
      <LineId Id="20" Count="0" />
      <LineId Id="23" Count="4" />
      <LineId Id="17" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="TestMotion.Visit">
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>