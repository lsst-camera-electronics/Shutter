<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_Protection" Id="{2dceb2c7-c1a1-4d57-b0b3-835d45fe31c4}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Protection
VAR_IN_OUT
	stAxis  	: ARRAY [GVL.cXP .. GVL.cXM] OF ST_AxisGroup;
	stateLVL1 	: INT;
	speed 		: LREAL;
END_VAR
VAR_INPUT
	reset : BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	checkHomed_TON 	: TON;
	
	//for use end of travel protection
	eotDistTravel	: ARRAY [GVL.cXP .. GVL.cXM, lmHome .. lmDeploy] OF LREAL;
	eotDistStart	: ARRAY [GVL.cXP .. GVL.cXM, lmHome .. lmDeploy] OF LREAL;
	eotRtrig		: ARRAY [GVL.cXP .. GVL.cXM, lmHome .. lmDeploy] OF R_Trig;
END_VAR

VAR CONSTANT
	lmHome 		: INT 	:= 0;
	lmDeploy	: INT 	:= 1;
	eotTravelLm	: LREAL := 2;
	diffLimit 	: LREAL	:= 5;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
This function block contains the logic for the shutter system protection. 
*)


//Brake status check - if brakes are not disengaged, disable axis movement
IF stAxis[GVL.cXP].bBrake AND stAxis[GVL.cXM].bBrake THEN 
	stAxis[GVL.cXP].mcPower(Axis := stAxis[GVL.cXP].axisRef, Enable := TRUE, Enable_Positive := TRUE, Enable_Negative := TRUE);
	stAxis[GVL.cXM].mcPower(Axis := stAxis[GVL.cXM].axisRef, Enable := TRUE, Enable_Positive := TRUE, Enable_Negative := TRUE);	
ELSE
	stAxis[GVL.cXP].mcPower(Axis := stAxis[GVL.cXP].axisRef, Enable := TRUE, Enable_Positive := FALSE, Enable_Negative := FALSE);
	stAxis[GVL.cXM].mcPower(Axis := stAxis[GVL.cXM].axisRef, Enable := TRUE, Enable_Positive := FALSE, Enable_Negative := FALSE); 
END_IF

//Prevents movement if not homed.
(*
IF stateLVL1>400 THEN
	IF NOT axis[XP].axisRef.Status.Homed OR NOT axis[XM].axisRef.Status.Homed THEN
		 axis[XP].mcStop(Axis:=axis[XP].axisRef, Execute:=TRUE);
		 axis[XM].mcStop(Axis:=axis[XM].axisRef, Execute:=TRUE);
		//To-Do later... Add error code for not homed
	END_IF
END_IF
*)

//Check for calibration. If not both blades not calibrated, speed cannot be higher than 200 mms.
IF NOT stAxis[GVL.cXP].bIsCalibrated AND NOT stAxis[GVL.cXM].bIsCalibrated THEN
	IF speed > 200 THEN
		speed := 0;
	END_IF
END_IF

//Compare position seen by hall switch with position seen by motor encoder
IF stAxis[GVL.cXP].bIsCalibrated AND stAxis[GVL.cXM].bIsCalibrated THEN
	IF ABS(stAxis[GVL.cXP].fPosDiffAtTrip)>diffLimit OR ABS(stAxis[GVL.cXM].fPosDiffAtTrip)>diffLimit THEN
		stAxis[GVL.cXP].mcStop(Axis := stAxis[GVL.cXP].axisRef, Execute := TRUE);
		stAxis[GVL.cXM].mcStop(Axis := stAxis[GVL.cXM].axisRef, Execute := TRUE);
	END_IF
END_IF


(* limit switch protection no enabled; require all limit switch to function ....	
//End of travel stop
eotRtrig[XP,lmHome](CLK := axis[XM].limitHome);
eotRtrig[XP,lmDeploy](CLK := axis[XP].limitDeployed);
eotRtrig[XM,lmHome](CLK := axis[XM].limitHome);
eotRtrig[XM,lmDeploy](CLK := axis[XM].limitDeployed);
IF eotRtrig[XP,lmHome].Q THEN
	eotDistStart[XP,lmHome] := axis[XP].axisRef.NcToPlc.ActPos;
END_IF
IF eotRtrig[XP,lmDeploy].Q THEN
	eotDistStart[XP,lmDeploy] := axis[XP].axisRef.NcToPlc.ActPos;
END_IF
IF eotRtrig[XM,lmHome].Q THEN
	eotDistStart[XM,lmHome] := axis[XM].axisRef.NcToPlc.ActPos;
END_IF
IF eotRtrig[XM,lmDeploy].Q THEN
	eotDistStart[XM,lmDeploy] := axis[XM].axisRef.NcToPlc.ActPos;
END_IF									

IF axis[XP].limitHome THEN
	eotDistTravel[XP,lmHome] := eotDistStart[XP,lmHome] - axis[XP].axisRef.NcToPlc.ActPos;
	IF eotDistTravel[XP,lmHome] > eotTravelLm THEN
		axis[XP].mcPower(Axis := axis[XP].axisRef, Enable_Negative := FALSE);
	END_IF
ELSE
	axis[XP].mcPower(Axis := axis[XP].axisRef, Enable_Negative := TRUE);
END_IF

IF axis[XP].limitDeployed THEN
	eotDistTravel[XP,lmDeploy] := axis[XP].axisRef.NcToPlc.ActPos - eotDistStart[XP,lmDeploy];
	IF eotDistTravel[XP,lmHome] > eotTravelLm THEN
		axis[XP].mcPower(Axis := axis[XP].axisRef, Enable_Positive := FALSE);
	END_IF
ELSE
	axis[XP].mcPower(Axis := axis[XP].axisRef, Enable_Positive := TRUE);
END_IF


IF axis[XM].limitHome THEN
	eotDistTravel[XM,lmHome] := axis[XM].axisRef.NcToPlc.ActPos - eotDistStart[XM,lmHome];
	IF eotDistTravel[XM,lmHome] > eotTravelLm THEN
		axis[XM].mcPower(Axis := axis[XM].axisRef, Enable_Positive := FALSE);
	END_IF
ELSE
	axis[XM].mcPower(Axis := axis[XM].axisRef, Enable_Positive := TRUE);
END_IF

IF axis[XM].limitDeployed THEN
	eotDistTravel[XM,lmDeploy] := eotDistStart[XM,lmDeploy] - axis[XM].axisRef.NcToPlc.ActPos;
	IF eotDistTravel[XM,lmHome] > eotTravelLm THEN
		axis[XM].mcPower(Axis := axis[XM].axisRef, Enable_Negative := FALSE);
	END_IF
ELSE
	axis[XM].mcPower(Axis := axis[XM].axisRef, Enable_Negative := TRUE);
END_IF

*)
















]]></ST>
    </Implementation>
    <LineIds Name="FB_Protection">
      <LineId Id="178" Count="1" />
      <LineId Id="177" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="65" Count="7" />
      <LineId Id="146" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="355" Count="0" />
      <LineId Id="210" Count="6" />
      <LineId Id="209" Count="0" />
      <LineId Id="356" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="202" Count="1" />
      <LineId Id="205" Count="1" />
      <LineId Id="204" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="152" Count="1" />
      <LineId Id="217" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="324" Count="1" />
      <LineId Id="240" Count="0" />
      <LineId Id="251" Count="3" />
      <LineId Id="256" Count="0" />
      <LineId Id="278" Count="10" />
      <LineId Id="277" Count="0" />
      <LineId Id="241" Count="1" />
      <LineId Id="289" Count="0" />
      <LineId Id="292" Count="1" />
      <LineId Id="295" Count="1" />
      <LineId Id="243" Count="0" />
      <LineId Id="297" Count="9" />
      <LineId Id="257" Count="0" />
      <LineId Id="307" Count="16" />
      <LineId Id="258" Count="18" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>