<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_Protection" Id="{2dceb2c7-c1a1-4d57-b0b3-835d45fe31c4}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Protection
VAR_IN_OUT
	stAxis  	: ARRAY [GVL.cXP .. GVL.cXM] OF ST_AxisGroup;
END_VAR
VAR_INPUT
	bAuxElxPermit	: BOOL;	
	reset : BOOL;
END_VAR
VAR_OUTPUT

END_VAR
VAR
	checkHomed_TON 	: TON;
	
	//for use end of travel protection
	eotDistTravel	: ARRAY [GVL.cXP .. GVL.cXM, lmHome .. lmDeploy] OF LREAL;
	eotDistStart	: ARRAY [GVL.cXP .. GVL.cXM, lmHome .. lmDeploy] OF LREAL;
	eotRtrig		: ARRAY [GVL.cXP .. GVL.cXM, lmHome .. lmDeploy] OF R_Trig;
	
END_VAR

VAR CONSTANT
	lmHome 		: INT 	:= 0;
	lmDeploy	: INT 	:= 1;
	eotTravelLm	: LREAL := 2;
	diffLimit 	: LREAL	:= 5;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
This function block contains the logic for the shutter system protection. 
*)

(*Checks permit from auxiliary electronic subsystem*)
IF NOT bAuxElxPermit THEN
	stAxis[GVL.cXP].mcStop(Axis:=stAxis[GVL.cXP].axisRef, Execute:=TRUE);
	stAxis[GVL.cXM].mcStop(Axis:=stAxis[GVL.cXM].axisRef, Execute:=TRUE);
	stAxis[GVL.cXP].bBrake := GVL.cBrakeOn;
	stAxis[GVL.cXM].bBrake := GVL.cBrakeOn;
END_IF	

(*Check brake status - prevents motion if motion is commanded while brake is engaged*)
IF stAxis[GVL.cXP].bBrake = GVL.cBrakeOn OR stAxis[GVL.cXM].bBrake = GVL.cBrakeOn THEN
	IF NOT stAxis[GVL.cXP].axisRef.Status.StandStill OR NOT stAxis[GVL.cXM].axisRef.Status.StandStill THEN
		stAxis[GVL.cXP].mcPower(Axis := stAxis[GVL.cXP].axisRef, Enable := TRUE, Enable_Positive := FALSE, Enable_Negative := FALSE);
		stAxis[GVL.cXM].mcPower(Axis := stAxis[GVL.cXM].axisRef, Enable := TRUE, Enable_Positive := FALSE, Enable_Negative := FALSE); 
		//////// --set error here-- //////////////////////////////////////////////////////////////////////////////////////////
	END_IF
END_IF

(*Check position differences - Compare hall switch and motor encoder position. Stop motion if greater than diffLimit.*)
IF stAxis[GVL.cXP].bIsCalibrated AND stAxis[GVL.cXM].bIsCalibrated THEN
	IF ABS(stAxis[GVL.cXP].fPosDiffAtTrip)>diffLimit OR ABS(stAxis[GVL.cXM].fPosDiffAtTrip)>diffLimit THEN
		stAxis[GVL.cXP].mcStop(Axis := stAxis[GVL.cXP].axisRef, Execute := TRUE);
		stAxis[GVL.cXM].mcStop(Axis := stAxis[GVL.cXM].axisRef, Execute := TRUE);
		//////// --set error here-- //////////////////////////////////////////////////////////////////////////////////////////
	END_IF
END_IF

(*Check exposure time - If less than 100 ms, prevent exposure command from running*)
(*
	Need to define how exposure is set before this section can be done
	--code here--
*)

(*Check calibration status - If both blades not calibrated, speed cannot be higher than 200 mms.*)
IF NOT stAxis[GVL.cXP].bIsCalibrated AND NOT stAxis[GVL.cXM].bIsCalibrated THEN
	(*
	need to define how speed is set before this section can be done
	-- code here --
	*)
END_IF

(*Check home status - Prevents all other motion if not homed*)
IF NOT stAxis[GVL.cXP].axisRef.Status.Homed OR NOT stAxis[GVL.cXM].axisRef.Status.Homed THEN
	IF NOT stAxis[GVL.cXP].axisRef.Status.StandStill OR NOT stAxis[GVL.cXM].axisRef.Status.StandStill THEN
		 stAxis[GVL.cXP].mcStop(Axis:=stAxis[GVL.cXP].axisRef, Execute:=TRUE);
		 stAxis[GVL.cXM].mcStop(Axis:=stAxis[GVL.cXM].axisRef, Execute:=TRUE);
		 //////// --set error here-- //////////////////////////////////////////////////////////////////////////////////////////
	 END_IF
END_IF


(* limit switch protection no enabled; require all limit switch to function ....	
//End of travel stop
eotRtrig[XP,lmHome](CLK := axis[XM].limitHome);
eotRtrig[XP,lmDeploy](CLK := axis[XP].limitDeployed);
eotRtrig[XM,lmHome](CLK := axis[XM].limitHome);
eotRtrig[XM,lmDeploy](CLK := axis[XM].limitDeployed);
IF eotRtrig[XP,lmHome].Q THEN
	eotDistStart[XP,lmHome] := axis[XP].axisRef.NcToPlc.ActPos;
END_IF
IF eotRtrig[XP,lmDeploy].Q THEN
	eotDistStart[XP,lmDeploy] := axis[XP].axisRef.NcToPlc.ActPos;
END_IF
IF eotRtrig[XM,lmHome].Q THEN
	eotDistStart[XM,lmHome] := axis[XM].axisRef.NcToPlc.ActPos;
END_IF
IF eotRtrig[XM,lmDeploy].Q THEN
	eotDistStart[XM,lmDeploy] := axis[XM].axisRef.NcToPlc.ActPos;
END_IF									

IF axis[XP].limitHome THEN
	eotDistTravel[XP,lmHome] := eotDistStart[XP,lmHome] - axis[XP].axisRef.NcToPlc.ActPos;
	IF eotDistTravel[XP,lmHome] > eotTravelLm THEN
		axis[XP].mcPower(Axis := axis[XP].axisRef, Enable_Negative := FALSE);
	END_IF
ELSE
	axis[XP].mcPower(Axis := axis[XP].axisRef, Enable_Negative := TRUE);
END_IF

IF axis[XP].limitDeployed THEN
	eotDistTravel[XP,lmDeploy] := axis[XP].axisRef.NcToPlc.ActPos - eotDistStart[XP,lmDeploy];
	IF eotDistTravel[XP,lmHome] > eotTravelLm THEN
		axis[XP].mcPower(Axis := axis[XP].axisRef, Enable_Positive := FALSE);
	END_IF
ELSE
	axis[XP].mcPower(Axis := axis[XP].axisRef, Enable_Positive := TRUE);
END_IF


IF axis[XM].limitHome THEN
	eotDistTravel[XM,lmHome] := axis[XM].axisRef.NcToPlc.ActPos - eotDistStart[XM,lmHome];
	IF eotDistTravel[XM,lmHome] > eotTravelLm THEN
		axis[XM].mcPower(Axis := axis[XM].axisRef, Enable_Positive := FALSE);
	END_IF
ELSE
	axis[XM].mcPower(Axis := axis[XM].axisRef, Enable_Positive := TRUE);
END_IF

IF axis[XM].limitDeployed THEN
	eotDistTravel[XM,lmDeploy] := eotDistStart[XM,lmDeploy] - axis[XM].axisRef.NcToPlc.ActPos;
	IF eotDistTravel[XM,lmHome] > eotTravelLm THEN
		axis[XM].mcPower(Axis := axis[XM].axisRef, Enable_Negative := FALSE);
	END_IF
ELSE
	axis[XM].mcPower(Axis := axis[XM].axisRef, Enable_Negative := TRUE);
END_IF

*)
















]]></ST>
    </Implementation>
    <LineIds Name="FB_Protection">
      <LineId Id="178" Count="1" />
      <LineId Id="177" Count="0" />
      <LineId Id="386" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="388" Count="0" />
      <LineId Id="390" Count="0" />
      <LineId Id="394" Count="2" />
      <LineId Id="389" Count="0" />
      <LineId Id="65" Count="2" />
      <LineId Id="398" Count="0" />
      <LineId Id="71" Count="1" />
      <LineId Id="410" Count="0" />
      <LineId Id="399" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="401" Count="5" />
      <LineId Id="409" Count="0" />
      <LineId Id="407" Count="1" />
      <LineId Id="411" Count="0" />
      <LineId Id="400" Count="0" />
      <LineId Id="412" Count="0" />
      <LineId Id="414" Count="0" />
      <LineId Id="416" Count="0" />
      <LineId Id="413" Count="0" />
      <LineId Id="417" Count="2" />
      <LineId Id="422" Count="0" />
      <LineId Id="425" Count="0" />
      <LineId Id="424" Count="0" />
      <LineId Id="426" Count="0" />
      <LineId Id="423" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="355" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="428" Count="0" />
      <LineId Id="213" Count="1" />
      <LineId Id="430" Count="0" />
      <LineId Id="429" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="324" Count="1" />
      <LineId Id="240" Count="0" />
      <LineId Id="251" Count="3" />
      <LineId Id="256" Count="0" />
      <LineId Id="278" Count="10" />
      <LineId Id="277" Count="0" />
      <LineId Id="241" Count="1" />
      <LineId Id="289" Count="0" />
      <LineId Id="292" Count="1" />
      <LineId Id="295" Count="1" />
      <LineId Id="243" Count="0" />
      <LineId Id="297" Count="9" />
      <LineId Id="257" Count="0" />
      <LineId Id="307" Count="16" />
      <LineId Id="258" Count="18" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>